I0902 14:17:18.526311    3990 serve.go:43] cloudcode_cli (Jul  2 2024 12:01:58 -0700, cl:648796832 baseline:648796263)
I0902 14:17:18.526371    3990 serve.go:44] Command line: ["/home/reid_butler/.cache/cloud-code/cloudcode_cli/cloudcode_cli/linux_amd64/cloudcode_cli" "duet" "-logtostderr"]
I0902 14:17:18.536922    3990 life_cycle.go:135] Initializing. Architecture: "amd64", Operating system: "linux"
I0902 14:17:18.612480    3990 configuration.go:171] product updateChannel will be used
I0902 14:17:18.612525    3990 configuration.go:568] language thresholds: map[]
I0902 14:17:18.612547    3990 configuration.go:526] dataFileExtensions array: [.csv .tsv .jsonl]
I0902 14:17:18.612569    3990 configuration.go:768] atlas codeCompletion llm options: {MaxTokens:64 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc0012e6ce9 StopSequences:map[] DataFilePromptLines:0}
I0902 14:17:18.612608    3990 configuration.go:768] atlas codeGeneration llm options: {MaxTokens:512 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc0012e6d39 StopSequences:map[*:[[eod] [EOF] [pre] [suf] [mid]]] DataFilePromptLines:5}
I0902 14:17:18.612802    3990 configuration.go:251] Configured settings for atlasOpts: {"Project":"se-development-9566","LogPrompt":true,"UseTypeoverCache":true,"Complete":{"MaxTokens":64,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":null,"DataFilePromptLines":0},"Generate":{"MaxTokens":512,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":{"*":["[eod]","[EOF]","[pre]","[suf]","[mid]"]},"DataFilePromptLines":5},"DataFileExtensions":[".csv",".tsv",".jsonl"]}
I0902 14:17:18.612819    3990 configuration.go:263] Configured settings for opts: &{trace:false atlasAddr:cloudaicompanion.googleapis.com:443 cloudCodeAddr:cloudcode-pa.googleapis.com:443 cloudCodeQuotaProject: autoGen:false invokeGen:true codeCacheMaxEntries:1024 completionOpts:{debounce:50000000 throttle:100000000 minScoreThreshold:-6 languageThresholds:map[] enableThresholds:true commentCompletion:false citationLengthThreshold:-1 enableRecitations:true citationLogFilePath: repeatedStringFilterThreshold:60 deletionCompletion:true otherFilesGenerationLimit:20 otherFilesGenerationSizeLimit:-1 otherFilesCompletionLimit:0} chatOpts:{contextOrdering:fsu maxFileBytes:75000 maxHistoryBytes:500000 escapeContext:false otherFilesLimit:20 otherFilesSizeLimit:-1} useRest:<nil> useCloudCodeAPI:false enableNotebooks:false enableRAGL:false enableRAGLCompletion:false enableRAGLChat:false raglCoLocated:20 raglTotalFiles:250 raglFileLimit:524288}
I0902 14:17:18.612855    3990 configuration.go:265] Configured settings for canCancelRequests: true
I0902 14:17:18.612865    3990 configuration.go:267] Configured settings for contextPromptOpts: &{Endpoint:}
I0902 14:17:18.616427    3990 atlas.go:52] Using gRPC to access Atlas
I0902 14:17:18.624056    3990 atlas.go:112] CompleteCode request: parent:"projects/se-development-9566/locations/global" request_id:"cloudcode-648796832-951bc93f-4ea5-4c3c-93fb-38dc8ad0bfba" prompt:{experience:COMPLETE prefix:"healthcheck-8a46f28f-b732-4ff0-b355-db9af10c556f" temperature:0.2 max_output_tokens:64 expected_samples:4}
I0902 14:17:18.624463    3990 atlas.go:124] Atlas GenerateCode request ID: cloudcode-648796832-951bc93f-4ea5-4c3c-93fb-38dc8ad0bfba
I0902 14:17:18.689310    3990 handler.go:142] cancel was requested for: 2, needs to be canceled: true
I0902 14:17:18.983527    3990 atlas.go:132] CompleteCode response: 
I0902 14:17:18.983655    3990 handler.go:129] req #2 skipped: context canceled
I0902 14:17:21.577634    3990 experiments.go:121] Applied experiment flag "DuetAiCompletion__codeCompletion_triggerForDeletion" to completionOpts.deletionCompletion with value false
I0902 14:17:21.577669    3990 experiments.go:128] Applied experiment flag "DuetAiLocalRag__enable_local_rag" to enableRAGL with value true
I0902 14:17:21.577679    3990 experiments.go:132] Applied experiment flag "DuetAiLocalRag__enable_local_rag_chat" to enableRAGLChat with value true
I0902 14:17:21.577688    3990 experiments.go:136] Applied experiment flag "DuetAiLocalRag__enable_local_rag_completion" to enableRAGLCompletion with value true
I0902 14:17:21.577700    3990 experiments.go:105] Applied experiment flag "DuetAiCloudCodeAPI__enable_cloudcode_api" to useCloudCodeAPI with value true
I0902 14:17:21.577718    3990 experiments.go:113] Applied experiment flag "DuetAiMendelOverrides__inlineSuggestions_debounceMs" to completionOpts.debounce with value 300
I0902 14:17:21.577729    3990 experiments.go:101] Applied experiment flag "Chat__chat_context_window_size" to chat.contextWindowSize with value -1
I0902 14:17:21.577750    3990 experiments.go:97] Applied experiment flag "DuetAiGeneration__codeGeneration_context_window_size" to otherFilesGenerationSizeLimit with value 64000
I0902 14:17:21.577763    3990 experiments.go:160] Applied experiment flag "DuetAiLocalRag__otherfiles_chat_limit" to otherFilesChatLimit with value 20
I0902 14:17:21.577774    3990 experiments.go:156] Applied experiment flag "DuetAiLocalRag__otherfiles_completion_limit" to otherFilesCompletionLimit with value 15
I0902 14:17:21.577783    3990 experiments.go:140] Applied experiment flag "DuetAiLocalRag__otherfiles_generation_limit" to otherFilesGenerationLimit with value 40
I0902 14:17:21.577793    3990 experiments.go:152] Applied experiment flag "DuetAiLocalRag__cache_total_files" to totalFiles with value 250
I0902 14:17:21.577804    3990 experiments.go:109] Applied experiment flag "DuetAiMendelOverrides__codeCompletion_defaultThreshold" to completionOpts.minScoreTheshold with value -4.1
I0902 14:17:21.577814    3990 experiments.go:144] Applied experiment flag "DuetAiLocalRag__cache_co_located" to coLocated with value 20
I0902 14:17:21.577827    3990 experiments.go:148] Applied experiment flag "DuetAiLocalRag__cache_file_limit" to fileLimit with value 524288
I0902 14:17:21.577848    3990 configuration.go:394] Repopulating context cache from document cache
I0902 14:17:21.759338    3990 cloudcode.go:40] Using Cloud Code API
I0902 14:17:21.777610    3990 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"segments":[{"content":"healthcheck-b129e23a-a780-4791-b448-1c58b51a532b"},{"isSelected":true},{}]}},"project":"se-development-9566","requestId":"cloudcode-648796832-b9067868-1956-42e8-87f1-a5bbd8ced11b"}
W0902 14:17:35.605644    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:19:18.944359    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:19:25.071231    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:21:51.557012    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:28:24.001903    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:29:31.946593    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
Completion Provider - completion # 0 - Typed over previous completion
Completion Provider - completion # 0 - New completion requested from language client at position {"line":46,"character":20}, triggerKind=1
I0902 14:31:20.613733    3990 completion.go:221] Inline suggestion requested (request #46): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/input_test.py} Position:{Line:46 Character:20}} TriggerMode:0 IDESessionIndex:20240902_7 CompletionIndex:0}
I0902 14:31:20.620259    3990 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/input_test.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_input\nimport delete_input\nimport get_input\nimport list_inputs\nimport update_input\nimport utils\n\nproject_name = os.environ[\"525217445238\"]\nlocation = \"us-west2\"\ninput_id = f\"fastly-reid-input-{uuid.uuid4()}\"\n\ndef test_input_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    responses = list_inputs.list_inputs(project_name, location)\n    for response in responses:\n        next_input_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_input.delete_input(project_name, location, next_input_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    input_name_project_id = (\n        f\"projects/ "},{"isSelected":true},{"content":"/locations/us-west2/inputs/fastly-reid-input\"\n    )\n\n    # Tests\n\n    response = create_input.create_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    list_inputs.list_inputs(project_name, location)\n    out, _ = capsys.readouterr()\n    assert input_name_project_id in out\n\n    response = update_input.update_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n    assert response.preprocessing_config.crop.top_pixels == 5\n\n    response = get_input.get_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    response = delete_input.delete_input(project_name, location, input_id)\n    assert response == empty.Empty()\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/asset_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_asset\nimport delete_asset\nimport get_asset\nimport list_assets\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\nasset_id = f\"my-python-test-asset-{uuid.uuid4()}\"\nasset_uri = \"gs://cloud-samples-data/media/ForBiggerEscapes.mp4\"\n\n\ndef test_asset_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    responses = list_assets.list_assets(project_name, location)\n    for response in responses:\n        next_asset_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_asset.delete_asset(project_name, location, next_asset_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    asset_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/assets/{asset_id}\"\n    )\n\n    # Tests\n\n    response = create_asset.create_asset(project_name, location, asset_id, asset_uri)\n    assert asset_name_project_id in response.name\n\n    list_assets.list_assets(project_name, location)\n    out, _ = capsys.readouterr()\n    assert asset_name_project_id in out\n\n    response = get_asset.get_asset(project_name, location, asset_id)\n    assert asset_name_project_id in response.name\n\n    response = delete_asset.delete_asset(project_name, location, asset_id)\n    assert response == empty.Empty()\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_channel\nimport create_channel_with_backup_input\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel\nimport list_channel_events\nimport list_channels\nimport start_channel\nimport stop_channel\nimport update_channel\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nupdated_input_id = f\"python-test-up-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    channel_responses = list_channels.list_channels(project_name, location)\n\n    for response in channel_responses:\n        next_channel_id = response.name.rsplit(\"/\", 1)[-1]\n        input_attachments = response.input_attachments\n        if utils.is_resource_stale(response.create_time):\n            try:\n                event_responses = list_channel_events.list_channel_events(\n                    project_name, location, next_channel_id\n                )\n                for response in event_responses:\n                    next_event_id = response.name.rsplit(\"/\", 1)[-1]\n                    try:\n                        delete_channel_event.delete_channel_event(\n                            project_name, location, next_channel_id, next_event_id\n                        )\n                    except NotFound as e:\n                        print(f\"Ignoring NotFound, details: {e}\")\n                try:\n                    stop_channel.stop_channel(project_name, location, next_channel_id)\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, details: {e}\")\n                try:\n                    delete_channel.delete_channel(\n                        project_name, location, next_channel_id\n                    )\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, try to stop channel: {e}\")\n                    try:\n                        stop_channel.stop_channel(\n                            project_name, location, next_channel_id\n                        )\n                    except FailedPrecondition as e:\n                        print(f\"Ignoring FailedPrecondition, details: {e}\")\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n            for input_attachment in input_attachments:\n                next_input_id = input_attachment.input.rsplit(\"/\", 1)[-1]\n                try:\n                    delete_input.delete_input(project_name, location, next_input_id)\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n\n    # Set up\n\n    channel_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/channels/{channel_id}\"\n    )\n\n    create_input.create_input(project_name, location, input_id)\n    create_input.create_input(project_name, location, updated_input_id)\n\n    # Tests\n\n    response = create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    list_channels.list_channels(project_name, location)\n    out, _ = capsys.readouterr()\n    assert channel_name_project_id in out\n\n    response = update_channel.update_channel(\n        project_name, location, channel_id, updated_input_id\n    )\n    assert channel_name_project_id in response.name\n    for input_attachment in response.input_attachments:\n        assert \"updated-input\" in input_attachment.key\n\n    response = get_channel.get_channel(project_name, location, channel_id)\n    assert channel_name_project_id in response.name\n\n    start_channel.start_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Started channel\" in out\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Stopped channel\" in out\n\n    response = delete_channel.delete_channel(project_name, location, channel_id)\n    assert response == empty.Empty()\n\n    response = create_channel_with_backup_input.create_channel_with_backup_input(\n        project_name, location, channel_id, input_id, updated_input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    # Clean up\n\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n    delete_input.delete_input(project_name, location, updated_input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_event_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nimport pytest\n\nimport create_channel\nimport create_channel_event\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel_event\nimport list_channel_events\nimport start_channel\nimport stop_channel\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\nevent_id = f\"python-test-event-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_event_operations(capsys: pytest.fixture) -\u003e None:\n    # Set up\n\n    event_name_project_id = f\"projects/{project_name}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    create_input.create_input(project_name, location, input_id)\n\n    create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n\n    start_channel.start_channel(project_name, location, channel_id)\n\n    # Tests\n\n    response = create_channel_event.create_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    response = get_channel_event.get_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    list_channel_events.list_channel_events(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert event_name_project_id in out\n\n    response = delete_channel_event.delete_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert response is None\n\n    # Clean up\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/utils.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.protobuf import timestamp_pb2\n\nseconds_per_hour = 3600\n\n\ndef is_resource_stale(create_time: str) -\u003e bool:\n    \"\"\"Checks the create timestamp to see if the resource is stale (and should be deleted).\n    Args:\n        create_time: Creation time in Timestamp format.\"\"\"\n    timestamp = timestamp_pb2.Timestamp()\n    timestamp.FromDatetime(create_time)\n    now = timestamp_pb2.Timestamp()\n    now.GetCurrentTime()\n    if (now.seconds - timestamp.seconds) \u003e (3 * seconds_per_hour):\n        return True\n    else:\n        return False\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-848cc125-187f-4247-93db-db0186224bb2"}
I0902 14:31:21.116487    3990 completion.go:418] Code complete response for request #46 after post-processing: &{Suggestions:[] TraceID:514b956b0e1bb7dc ServerContext:febf27497eece1f6 RequestID:cloudcode-648796832-848cc125-187f-4247-93db-db0186224bb2 ServerTiming:gfet4t7; dur=473 NetPlusServerTiming:493.755259ms FromCache:false Typeover:false TriggerMode:0 ProcessingDetails:{RagStatus: AtlasExperience: PromptID:}}
Completion Provider - completion # 0 - Completion result obtained from language client
I0902 14:31:24.764308    3990 rag_cache.go:155] The current document with URI file:///home/reid_butler/.emacs.d is empty
W0902 14:32:11.313380    3990 server.go:549] unknown method "$/setTrace"
I0902 14:32:11.347591    3990 configuration.go:171] product updateChannel will be used
I0902 14:32:11.347678    3990 configuration.go:568] language thresholds: map[]
I0902 14:32:11.347713    3990 configuration.go:526] dataFileExtensions array: [.csv .tsv .jsonl]
I0902 14:32:11.347750    3990 configuration.go:768] atlas codeCompletion llm options: {MaxTokens:64 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc0009e9169 StopSequences:map[] DataFilePromptLines:0}
I0902 14:32:11.347824    3990 configuration.go:768] atlas codeGeneration llm options: {MaxTokens:512 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc0009e91b9 StopSequences:map[*:[[eod] [EOF] [pre] [suf] [mid]]] DataFilePromptLines:5}
I0902 14:32:11.347904    3990 configuration.go:251] Configured settings for atlasOpts: {"Project":"se-development-9566","LogPrompt":true,"UseTypeoverCache":true,"Complete":{"MaxTokens":64,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":null,"DataFilePromptLines":0},"Generate":{"MaxTokens":512,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":{"*":["[eod]","[EOF]","[pre]","[suf]","[mid]"]},"DataFilePromptLines":5},"DataFileExtensions":[".csv",".tsv",".jsonl"]}
I0902 14:32:11.347958    3990 configuration.go:259] Configured settings for cloudCodeOpts: {"Project":"se-development-9566","LogPrompt":true,"UseTypeoverCache":true}
I0902 14:32:11.347976    3990 configuration.go:263] Configured settings for opts: &{trace:false atlasAddr:cloudaicompanion.googleapis.com:443 cloudCodeAddr:cloudcode-pa.googleapis.com:443 cloudCodeQuotaProject: autoGen:false invokeGen:true codeCacheMaxEntries:1024 completionOpts:{debounce:50000000 throttle:100000000 minScoreThreshold:-6 languageThresholds:map[] enableThresholds:true commentCompletion:false citationLengthThreshold:-1 enableRecitations:true citationLogFilePath: repeatedStringFilterThreshold:60 deletionCompletion:true otherFilesGenerationLimit:20 otherFilesGenerationSizeLimit:-1 otherFilesCompletionLimit:0} chatOpts:{contextOrdering:fsu maxFileBytes:75000 maxHistoryBytes:500000 escapeContext:false otherFilesLimit:20 otherFilesSizeLimit:-1} useRest:<nil> useCloudCodeAPI:true enableNotebooks:false enableRAGL:false enableRAGLCompletion:false enableRAGLChat:false raglCoLocated:20 raglTotalFiles:250 raglFileLimit:524288}
I0902 14:32:11.348043    3990 configuration.go:265] Configured settings for canCancelRequests: true
I0902 14:32:11.348060    3990 configuration.go:267] Configured settings for contextPromptOpts: &{Endpoint:}
I0902 14:32:11.349984    3990 experiments.go:121] Applied experiment flag "DuetAiCompletion__codeCompletion_triggerForDeletion" to completionOpts.deletionCompletion with value false
I0902 14:32:11.350036    3990 experiments.go:128] Applied experiment flag "DuetAiLocalRag__enable_local_rag" to enableRAGL with value true
I0902 14:32:11.350048    3990 experiments.go:132] Applied experiment flag "DuetAiLocalRag__enable_local_rag_chat" to enableRAGLChat with value true
I0902 14:32:11.350069    3990 experiments.go:136] Applied experiment flag "DuetAiLocalRag__enable_local_rag_completion" to enableRAGLCompletion with value true
I0902 14:32:11.350091    3990 experiments.go:105] Applied experiment flag "DuetAiCloudCodeAPI__enable_cloudcode_api" to useCloudCodeAPI with value true
I0902 14:32:11.350145    3990 experiments.go:113] Applied experiment flag "DuetAiMendelOverrides__inlineSuggestions_debounceMs" to completionOpts.debounce with value 300
I0902 14:32:11.350162    3990 experiments.go:101] Applied experiment flag "Chat__chat_context_window_size" to chat.contextWindowSize with value -1
I0902 14:32:11.350174    3990 experiments.go:97] Applied experiment flag "DuetAiGeneration__codeGeneration_context_window_size" to otherFilesGenerationSizeLimit with value 64000
I0902 14:32:11.350190    3990 experiments.go:160] Applied experiment flag "DuetAiLocalRag__otherfiles_chat_limit" to otherFilesChatLimit with value 20
I0902 14:32:11.350206    3990 experiments.go:156] Applied experiment flag "DuetAiLocalRag__otherfiles_completion_limit" to otherFilesCompletionLimit with value 15
I0902 14:32:11.350220    3990 experiments.go:140] Applied experiment flag "DuetAiLocalRag__otherfiles_generation_limit" to otherFilesGenerationLimit with value 40
I0902 14:32:11.350230    3990 experiments.go:152] Applied experiment flag "DuetAiLocalRag__cache_total_files" to totalFiles with value 250
I0902 14:32:11.350241    3990 experiments.go:109] Applied experiment flag "DuetAiMendelOverrides__codeCompletion_defaultThreshold" to completionOpts.minScoreTheshold with value -4.1
I0902 14:32:11.350258    3990 experiments.go:144] Applied experiment flag "DuetAiLocalRag__cache_co_located" to coLocated with value 20
I0902 14:32:11.350273    3990 experiments.go:148] Applied experiment flag "DuetAiLocalRag__cache_file_limit" to fileLimit with value 524288
I0902 14:32:11.350308    3990 configuration.go:394] Repopulating context cache from document cache
I0902 14:32:11.393831    3990 rag_cache.go:155] The current document with URI file:///home/reid_butler/.emacs.d is empty
I0902 14:32:18.622335    3990 life_cycle.go:262] codeReportEvery: recomputing codereport metric
W0902 14:33:11.989798    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/python-docs-samples/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:34:20.751679    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/python-docs-samples/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:35:36.034399    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:35:36.034492    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/python-docs-samples/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:35:57.224877    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/python-docs-samples/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 14:35:57.224971    3990 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/.git/COMMIT_EDITMSGunknown language: git-commit
I0902 14:36:18.622272    3990 life_cycle.go:262] codeReportEvery: recomputing codereport metric
