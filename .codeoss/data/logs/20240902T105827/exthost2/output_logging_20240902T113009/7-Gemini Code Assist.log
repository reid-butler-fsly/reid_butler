I0902 12:11:21.935147    9143 serve.go:43] cloudcode_cli (Jul  2 2024 12:01:58 -0700, cl:648796832 baseline:648796263)
I0902 12:11:21.936607    9143 serve.go:44] Command line: ["/home/reid_butler/.cache/cloud-code/cloudcode_cli/cloudcode_cli/linux_amd64/cloudcode_cli" "duet" "-logtostderr"]
I0902 12:11:21.939659    9143 life_cycle.go:135] Initializing. Architecture: "amd64", Operating system: "linux"
I0902 12:11:22.083952    9143 handler.go:142] cancel was requested for: 1, needs to be canceled: true
I0902 12:11:22.090240    9143 configuration.go:171] product updateChannel will be used
I0902 12:11:22.090283    9143 configuration.go:568] language thresholds: map[]
I0902 12:11:22.090317    9143 configuration.go:526] dataFileExtensions array: [.csv .tsv .jsonl]
I0902 12:11:22.090341    9143 configuration.go:768] atlas codeCompletion llm options: {MaxTokens:64 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc001164f39 StopSequences:map[] DataFilePromptLines:0}
I0902 12:11:22.090378    9143 configuration.go:768] atlas codeGeneration llm options: {MaxTokens:512 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc001164f89 StopSequences:map[*:[[eod] [EOF] [pre] [suf] [mid]]] DataFilePromptLines:5}
I0902 12:11:22.090606    9143 configuration.go:251] Configured settings for atlasOpts: {"Project":"","LogPrompt":true,"UseTypeoverCache":true,"Complete":{"MaxTokens":64,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":null,"DataFilePromptLines":0},"Generate":{"MaxTokens":512,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":{"*":["[eod]","[EOF]","[pre]","[suf]","[mid]"]},"DataFilePromptLines":5},"DataFileExtensions":[".csv",".tsv",".jsonl"]}
I0902 12:11:22.090621    9143 configuration.go:263] Configured settings for opts: &{trace:false atlasAddr:cloudaicompanion.googleapis.com:443 cloudCodeAddr:cloudcode-pa.googleapis.com:443 cloudCodeQuotaProject: autoGen:false invokeGen:true codeCacheMaxEntries:1024 completionOpts:{debounce:50000000 throttle:100000000 minScoreThreshold:-6 languageThresholds:map[] enableThresholds:true commentCompletion:false citationLengthThreshold:-1 enableRecitations:true citationLogFilePath: repeatedStringFilterThreshold:60 deletionCompletion:true otherFilesGenerationLimit:20 otherFilesGenerationSizeLimit:-1 otherFilesCompletionLimit:0} chatOpts:{contextOrdering:fsu maxFileBytes:75000 maxHistoryBytes:500000 escapeContext:false otherFilesLimit:20 otherFilesSizeLimit:-1} useRest:<nil> useCloudCodeAPI:false enableNotebooks:false enableRAGL:false enableRAGLCompletion:false enableRAGLChat:false raglCoLocated:20 raglTotalFiles:250 raglFileLimit:524288}
I0902 12:11:22.090656    9143 configuration.go:265] Configured settings for canCancelRequests: true
I0902 12:11:22.090666    9143 configuration.go:267] Configured settings for contextPromptOpts: &{Endpoint:}
I0902 12:11:22.092630    9143 handler.go:129] req #1 skipped: context canceled
W0902 12:11:46.351444    9143 server.go:549] unknown method "$/setTrace"
I0902 12:11:46.494861    9143 configuration.go:171] product updateChannel will be used
I0902 12:11:46.494915    9143 configuration.go:568] language thresholds: map[]
I0902 12:11:46.494939    9143 configuration.go:526] dataFileExtensions array: [.csv .tsv .jsonl]
I0902 12:11:46.494986    9143 configuration.go:768] atlas codeCompletion llm options: {MaxTokens:64 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc0010d1b49 StopSequences:map[] DataFilePromptLines:0}
I0902 12:11:46.495031    9143 configuration.go:768] atlas codeGeneration llm options: {MaxTokens:512 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc0010d1b99 StopSequences:map[*:[[eod] [EOF] [pre] [suf] [mid]]] DataFilePromptLines:5}
I0902 12:11:46.495121    9143 configuration.go:251] Configured settings for atlasOpts: {"Project":"se-development-9566","LogPrompt":true,"UseTypeoverCache":true,"Complete":{"MaxTokens":64,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":null,"DataFilePromptLines":0},"Generate":{"MaxTokens":512,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":{"*":["[eod]","[EOF]","[pre]","[suf]","[mid]"]},"DataFilePromptLines":5},"DataFileExtensions":[".csv",".tsv",".jsonl"]}
I0902 12:11:46.495136    9143 configuration.go:263] Configured settings for opts: &{trace:false atlasAddr:cloudaicompanion.googleapis.com:443 cloudCodeAddr:cloudcode-pa.googleapis.com:443 cloudCodeQuotaProject: autoGen:false invokeGen:true codeCacheMaxEntries:1024 completionOpts:{debounce:50000000 throttle:100000000 minScoreThreshold:-6 languageThresholds:map[] enableThresholds:true commentCompletion:false citationLengthThreshold:-1 enableRecitations:true citationLogFilePath: repeatedStringFilterThreshold:60 deletionCompletion:true otherFilesGenerationLimit:20 otherFilesGenerationSizeLimit:-1 otherFilesCompletionLimit:0} chatOpts:{contextOrdering:fsu maxFileBytes:75000 maxHistoryBytes:500000 escapeContext:false otherFilesLimit:20 otherFilesSizeLimit:-1} useRest:<nil> useCloudCodeAPI:false enableNotebooks:false enableRAGL:false enableRAGLCompletion:false enableRAGLChat:false raglCoLocated:20 raglTotalFiles:250 raglFileLimit:524288}
I0902 12:11:46.495178    9143 configuration.go:265] Configured settings for canCancelRequests: true
I0902 12:11:46.495191    9143 configuration.go:267] Configured settings for contextPromptOpts: &{Endpoint:}
I0902 12:11:48.582470    9143 experiments.go:121] Applied experiment flag "DuetAiCompletion__codeCompletion_triggerForDeletion" to completionOpts.deletionCompletion with value false
I0902 12:11:48.582510    9143 experiments.go:136] Applied experiment flag "DuetAiLocalRag__enable_local_rag_completion" to enableRAGLCompletion with value true
I0902 12:11:48.582521    9143 experiments.go:132] Applied experiment flag "DuetAiLocalRag__enable_local_rag_chat" to enableRAGLChat with value true
I0902 12:11:48.582534    9143 experiments.go:128] Applied experiment flag "DuetAiLocalRag__enable_local_rag" to enableRAGL with value true
I0902 12:11:48.582546    9143 experiments.go:105] Applied experiment flag "DuetAiCloudCodeAPI__enable_cloudcode_api" to useCloudCodeAPI with value true
I0902 12:11:48.582567    9143 experiments.go:101] Applied experiment flag "Chat__chat_context_window_size" to chat.contextWindowSize with value -1
I0902 12:11:48.582900    9143 experiments.go:97] Applied experiment flag "DuetAiGeneration__codeGeneration_context_window_size" to otherFilesGenerationSizeLimit with value 64000
I0902 12:11:48.582926    9143 experiments.go:160] Applied experiment flag "DuetAiLocalRag__otherfiles_chat_limit" to otherFilesChatLimit with value 20
I0902 12:11:48.582964    9143 experiments.go:156] Applied experiment flag "DuetAiLocalRag__otherfiles_completion_limit" to otherFilesCompletionLimit with value 15
I0902 12:11:48.582979    9143 experiments.go:140] Applied experiment flag "DuetAiLocalRag__otherfiles_generation_limit" to otherFilesGenerationLimit with value 40
I0902 12:11:48.582991    9143 experiments.go:113] Applied experiment flag "DuetAiMendelOverrides__inlineSuggestions_debounceMs" to completionOpts.debounce with value 300
I0902 12:11:48.583019    9143 experiments.go:144] Applied experiment flag "DuetAiLocalRag__cache_co_located" to coLocated with value 20
I0902 12:11:48.583033    9143 experiments.go:148] Applied experiment flag "DuetAiLocalRag__cache_file_limit" to fileLimit with value 524288
I0902 12:11:48.583043    9143 experiments.go:152] Applied experiment flag "DuetAiLocalRag__cache_total_files" to totalFiles with value 250
I0902 12:11:48.583053    9143 experiments.go:109] Applied experiment flag "DuetAiMendelOverrides__codeCompletion_defaultThreshold" to completionOpts.minScoreTheshold with value -4.1
I0902 12:11:48.583077    9143 configuration.go:394] Repopulating context cache from document cache
I0902 12:11:48.724208    9143 cloudcode.go:40] Using Cloud Code API
I0902 12:11:48.744594    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"segments":[{"content":"healthcheck-17fdfd63-0a15-433c-ae7a-9641038ef806"},{"isSelected":true},{}]}},"project":"se-development-9566","requestId":"cloudcode-648796832-6ce3ed6b-de85-4d86-93bf-a330ae18a7ae"}
I0902 12:11:49.305118    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"segments":[{"content":"healthcheck-cec0111f-aaa8-44a8-8192-9fadc9cc285f"},{"isSelected":true},{}]}},"project":"se-development-9566","requestId":"cloudcode-648796832-ba30de63-2402-4f24-a478-c53b75fce1ff"}
I0902 12:11:51.467542    9143 conversation.go:118] New conversation started, chat history reset
I0902 12:12:25.255390    9143 conversation.go:130] conversation requested (request #8): {Input:why am I getting a keyerror on like 29 DocumentURI:file:///home/reid_butler/python-docs-samples/video/live-stream/input_test.py SelectedRange:{Start:{Line:28 Character:0} End:{Line:29 Character:0}} PrependInput:}
I0902 12:12:25.259318    9143 client.go:182] GenerateChat request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/input_test.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_input\nimport delete_input\nimport get_input\nimport list_inputs\nimport update_input\nimport utils\n\n"},{"content":"project_name = os.environ[\"525217445238\"]\n","isSelected":true},{"content":"location = \"us-west2\"\ninput_id = f\"fastly-reid-input-{uuid.uuid4()}\"\n\ndef test_input_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    responses = list_inputs.list_inputs(project_name, location)\n    for response in responses:\n        next_input_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_input.delete_input(project_name, location, next_input_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    input_name_project_id = (\n        f\"projects/se-development-9566/locations/us-west2/inputs/fastly-reid-input\"\n    )\n\n    # Tests\n\n    response = create_input.create_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    list_inputs.list_inputs(project_name, location)\n    out, _ = capsys.readouterr()\n    assert input_name_project_id in out\n\n    response = update_input.update_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n    assert response.preprocessing_config.crop.top_pixels == 5\n\n    response = get_input.get_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    response = delete_input.delete_input(project_name, location, input_id)\n    assert response == empty.Empty()\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/asset_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_asset\nimport delete_asset\nimport get_asset\nimport list_assets\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\nasset_id = f\"my-python-test-asset-{uuid.uuid4()}\"\nasset_uri = \"gs://cloud-samples-data/media/ForBiggerEscapes.mp4\"\n\n\ndef test_asset_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    responses = list_assets.list_assets(project_name, location)\n    for response in responses:\n        next_asset_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_asset.delete_asset(project_name, location, next_asset_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    asset_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/assets/{asset_id}\"\n    )\n\n    # Tests\n\n    response = create_asset.create_asset(project_name, location, asset_id, asset_uri)\n    assert asset_name_project_id in response.name\n\n    list_assets.list_assets(project_name, location)\n    out, _ = capsys.readouterr()\n    assert asset_name_project_id in out\n\n    response = get_asset.get_asset(project_name, location, asset_id)\n    assert asset_name_project_id in response.name\n\n    response = delete_asset.delete_asset(project_name, location, asset_id)\n    assert response == empty.Empty()\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_channel\nimport create_channel_with_backup_input\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel\nimport list_channel_events\nimport list_channels\nimport start_channel\nimport stop_channel\nimport update_channel\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nupdated_input_id = f\"python-test-up-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    channel_responses = list_channels.list_channels(project_name, location)\n\n    for response in channel_responses:\n        next_channel_id = response.name.rsplit(\"/\", 1)[-1]\n        input_attachments = response.input_attachments\n        if utils.is_resource_stale(response.create_time):\n            try:\n                event_responses = list_channel_events.list_channel_events(\n                    project_name, location, next_channel_id\n                )\n                for response in event_responses:\n                    next_event_id = response.name.rsplit(\"/\", 1)[-1]\n                    try:\n                        delete_channel_event.delete_channel_event(\n                            project_name, location, next_channel_id, next_event_id\n                        )\n                    except NotFound as e:\n                        print(f\"Ignoring NotFound, details: {e}\")\n                try:\n                    stop_channel.stop_channel(project_name, location, next_channel_id)\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, details: {e}\")\n                try:\n                    delete_channel.delete_channel(\n                        project_name, location, next_channel_id\n                    )\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, try to stop channel: {e}\")\n                    try:\n                        stop_channel.stop_channel(\n                            project_name, location, next_channel_id\n                        )\n                    except FailedPrecondition as e:\n                        print(f\"Ignoring FailedPrecondition, details: {e}\")\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n            for input_attachment in input_attachments:\n                next_input_id = input_attachment.input.rsplit(\"/\", 1)[-1]\n                try:\n                    delete_input.delete_input(project_name, location, next_input_id)\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n\n    # Set up\n\n    channel_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/channels/{channel_id}\"\n    )\n\n    create_input.create_input(project_name, location, input_id)\n    create_input.create_input(project_name, location, updated_input_id)\n\n    # Tests\n\n    response = create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    list_channels.list_channels(project_name, location)\n    out, _ = capsys.readouterr()\n    assert channel_name_project_id in out\n\n    response = update_channel.update_channel(\n        project_name, location, channel_id, updated_input_id\n    )\n    assert channel_name_project_id in response.name\n    for input_attachment in response.input_attachments:\n        assert \"updated-input\" in input_attachment.key\n\n    response = get_channel.get_channel(project_name, location, channel_id)\n    assert channel_name_project_id in response.name\n\n    start_channel.start_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Started channel\" in out\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Stopped channel\" in out\n\n    response = delete_channel.delete_channel(project_name, location, channel_id)\n    assert response == empty.Empty()\n\n    response = create_channel_with_backup_input.create_channel_with_backup_input(\n        project_name, location, channel_id, input_id, updated_input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    # Clean up\n\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n    delete_input.delete_input(project_name, location, updated_input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_event_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nimport pytest\n\nimport create_channel\nimport create_channel_event\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel_event\nimport list_channel_events\nimport start_channel\nimport stop_channel\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\nevent_id = f\"python-test-event-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_event_operations(capsys: pytest.fixture) -\u003e None:\n    # Set up\n\n    event_name_project_id = f\"projects/{project_name}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    create_input.create_input(project_name, location, input_id)\n\n    create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n\n    start_channel.start_channel(project_name, location, channel_id)\n\n    # Tests\n\n    response = create_channel_event.create_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    response = get_channel_event.get_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    list_channel_events.list_channel_events(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert event_name_project_id in out\n\n    response = delete_channel_event.delete_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert response is None\n\n    # Clean up\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/utils.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.protobuf import timestamp_pb2\n\nseconds_per_hour = 3600\n\n\ndef is_resource_stale(create_time: str) -\u003e bool:\n    \"\"\"Checks the create timestamp to see if the resource is stale (and should be deleted).\n    Args:\n        create_time: Creation time in Timestamp format.\"\"\"\n    timestamp = timestamp_pb2.Timestamp()\n    timestamp.FromDatetime(create_time)\n    now = timestamp_pb2.Timestamp()\n    now.GetCurrentTime()\n    if (now.seconds - timestamp.seconds) \u003e (3 * seconds_per_hour):\n        return True\n    else:\n        return False\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-input\"\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-0b36f0c7-284f-41b7-828e-c9e252e1dc7c","userMessage":"why am I getting a keyerror on like 29"}
I0902 12:12:32.997008    9143 conversation.go:207] conversation response for request #8 (TraceID:cd3c71e87a494d8e) &{Entity:SYSTEM MarkdownText:You're getting a `KeyError` on line 29 of `input_test.py` because you're trying to access the environment variable with the key `"525217445238"`. This is likely a typo, and you probably meant to use the environment variable name `"GOOGLE_CLOUD_PROJECT"` like you did in the other files. 

To fix this, change line 29 to:

```python
project_name = os.environ["GOOGLE_CLOUD_PROJECT"]
```

This will ensure that you're accessing the correct environment variable for your Google Cloud project ID. Citations:[] IDEContext:0xc0010bb200}
I0902 12:13:20.254004    9143 conversation.go:118] New conversation started, chat history reset
I0902 12:13:22.093439    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
I0902 12:15:19.845918    9143 conversation.go:130] conversation requested (request #30): {Input:why do i not get an output when i run this python file?  DocumentURI:file:///home/reid_butler/python-docs-samples/video/live-stream/input_test.py SelectedRange:{Start:{Line:32 Character:58} End:{Line:32 Character:58}} PrependInput:}
I0902 12:15:19.850810    9143 client.go:182] GenerateChat request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/input_test.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_input\nimport delete_input\nimport get_input\nimport list_inputs\nimport update_input\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-west2\"\ninput_id = f\"fastly-reid-input-{uuid.uuid4()}\"\n\ndef test_input_operations(capsys: pytest.fixture) -\u003e None:"},{"isSelected":true},{"content":"\n    # Clean up old resources in the test project\n    responses = list_inputs.list_inputs(project_name, location)\n    for response in responses:\n        next_input_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_input.delete_input(project_name, location, next_input_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    input_name_project_id = (\n        f\"projects/se-development-9566/locations/us-west2/inputs/fastly-reid-input\"\n    )\n\n    # Tests\n\n    response = create_input.create_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    list_inputs.list_inputs(project_name, location)\n    out, _ = capsys.readouterr()\n    assert input_name_project_id in out\n\n    response = update_input.update_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n    assert response.preprocessing_config.crop.top_pixels == 5\n\n    response = get_input.get_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    response = delete_input.delete_input(project_name, location, input_id)\n    assert response == empty.Empty()\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/asset_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_asset\nimport delete_asset\nimport get_asset\nimport list_assets\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\nasset_id = f\"my-python-test-asset-{uuid.uuid4()}\"\nasset_uri = \"gs://cloud-samples-data/media/ForBiggerEscapes.mp4\"\n\n\ndef test_asset_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    responses = list_assets.list_assets(project_name, location)\n    for response in responses:\n        next_asset_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_asset.delete_asset(project_name, location, next_asset_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    asset_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/assets/{asset_id}\"\n    )\n\n    # Tests\n\n    response = create_asset.create_asset(project_name, location, asset_id, asset_uri)\n    assert asset_name_project_id in response.name\n\n    list_assets.list_assets(project_name, location)\n    out, _ = capsys.readouterr()\n    assert asset_name_project_id in out\n\n    response = get_asset.get_asset(project_name, location, asset_id)\n    assert asset_name_project_id in response.name\n\n    response = delete_asset.delete_asset(project_name, location, asset_id)\n    assert response == empty.Empty()\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_channel\nimport create_channel_with_backup_input\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel\nimport list_channel_events\nimport list_channels\nimport start_channel\nimport stop_channel\nimport update_channel\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nupdated_input_id = f\"python-test-up-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    channel_responses = list_channels.list_channels(project_name, location)\n\n    for response in channel_responses:\n        next_channel_id = response.name.rsplit(\"/\", 1)[-1]\n        input_attachments = response.input_attachments\n        if utils.is_resource_stale(response.create_time):\n            try:\n                event_responses = list_channel_events.list_channel_events(\n                    project_name, location, next_channel_id\n                )\n                for response in event_responses:\n                    next_event_id = response.name.rsplit(\"/\", 1)[-1]\n                    try:\n                        delete_channel_event.delete_channel_event(\n                            project_name, location, next_channel_id, next_event_id\n                        )\n                    except NotFound as e:\n                        print(f\"Ignoring NotFound, details: {e}\")\n                try:\n                    stop_channel.stop_channel(project_name, location, next_channel_id)\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, details: {e}\")\n                try:\n                    delete_channel.delete_channel(\n                        project_name, location, next_channel_id\n                    )\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, try to stop channel: {e}\")\n                    try:\n                        stop_channel.stop_channel(\n                            project_name, location, next_channel_id\n                        )\n                    except FailedPrecondition as e:\n                        print(f\"Ignoring FailedPrecondition, details: {e}\")\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n            for input_attachment in input_attachments:\n                next_input_id = input_attachment.input.rsplit(\"/\", 1)[-1]\n                try:\n                    delete_input.delete_input(project_name, location, next_input_id)\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n\n    # Set up\n\n    channel_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/channels/{channel_id}\"\n    )\n\n    create_input.create_input(project_name, location, input_id)\n    create_input.create_input(project_name, location, updated_input_id)\n\n    # Tests\n\n    response = create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    list_channels.list_channels(project_name, location)\n    out, _ = capsys.readouterr()\n    assert channel_name_project_id in out\n\n    response = update_channel.update_channel(\n        project_name, location, channel_id, updated_input_id\n    )\n    assert channel_name_project_id in response.name\n    for input_attachment in response.input_attachments:\n        assert \"updated-input\" in input_attachment.key\n\n    response = get_channel.get_channel(project_name, location, channel_id)\n    assert channel_name_project_id in response.name\n\n    start_channel.start_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Started channel\" in out\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Stopped channel\" in out\n\n    response = delete_channel.delete_channel(project_name, location, channel_id)\n    assert response == empty.Empty()\n\n    response = create_channel_with_backup_input.create_channel_with_backup_input(\n        project_name, location, channel_id, input_id, updated_input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    # Clean up\n\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n    delete_input.delete_input(project_name, location, updated_input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_event_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nimport pytest\n\nimport create_channel\nimport create_channel_event\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel_event\nimport list_channel_events\nimport start_channel\nimport stop_channel\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\nevent_id = f\"python-test-event-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_event_operations(capsys: pytest.fixture) -\u003e None:\n    # Set up\n\n    event_name_project_id = f\"projects/{project_name}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    create_input.create_input(project_name, location, input_id)\n\n    create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n\n    start_channel.start_channel(project_name, location, channel_id)\n\n    # Tests\n\n    response = create_channel_event.create_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    response = get_channel_event.get_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    list_channel_events.list_channel_events(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert event_name_project_id in out\n\n    response = delete_channel_event.delete_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert response is None\n\n    # Clean up\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/utils.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.protobuf import timestamp_pb2\n\nseconds_per_hour = 3600\n\n\ndef is_resource_stale(create_time: str) -\u003e bool:\n    \"\"\"Checks the create timestamp to see if the resource is stale (and should be deleted).\n    Args:\n        create_time: Creation time in Timestamp format.\"\"\"\n    timestamp = timestamp_pb2.Timestamp()\n    timestamp.FromDatetime(create_time)\n    now = timestamp_pb2.Timestamp()\n    now.GetCurrentTime()\n    if (now.seconds - timestamp.seconds) \u003e (3 * seconds_per_hour):\n        return True\n    else:\n        return False\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-input\"\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-aac19b26-f32f-4e96-8858-0e9802760326","userMessage":"why do i not get an output when i run this python file? "}
I0902 12:15:28.837229    9143 conversation.go:207] conversation response for request #30 (TraceID:3580beeadd392053) &{Entity:SYSTEM MarkdownText:Unfortunately, I need more information to understand why you're not getting an output when running your Python file.  "No output" can mean a few things, and the potential causes are diverse. 

To help you debug, please provide the following:

* **The full code of `input_test.py`:** The snippet you shared only shows part of the file.
* **How are you running the file?**  Are you using:
    * `python input_test.py` from the command line?
    * An IDE's run button?
    * Something else?
* **What *do* you see in the output?** Is it completely blank?  Do you get errors?
* **What *were* you expecting to see?**  Describe the desired output.

Once I have this information, I can give you much more specific guidance! Citations:[] IDEContext:0xc0010ba380}
I0902 12:16:53.036971    9143 conversation.go:130] conversation requested (request #33): {Input:i am running it from cloud shell and expecting to see an output value of 'operation_id' DocumentURI:file:///home/reid_butler/python-docs-samples/video/live-stream/input_test.py SelectedRange:{Start:{Line:32 Character:58} End:{Line:32 Character:58}} PrependInput:}
I0902 12:16:53.040764    9143 client.go:182] GenerateChat request: {"history":[{"author":"USER","content":"why do i not get an output when i run this python file? "},{"author":"SYSTEM","content":"Unfortunately, I need more information to understand why you're not getting an output when running your Python file.  \"No output\" can mean a few things, and the potential causes are diverse. \n\nTo help you debug, please provide the following:\n\n* **The full code of `input_test.py`:** The snippet you shared only shows part of the file.\n* **How are you running the file?**  Are you using:\n    * `python input_test.py` from the command line?\n    * An IDE's run button?\n    * Something else?\n* **What *do* you see in the output?** Is it completely blank?  Do you get errors?\n* **What *were* you expecting to see?**  Describe the desired output.\n\nOnce I have this information, I can give you much more specific guidance!"}],"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/input_test.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_input\nimport delete_input\nimport get_input\nimport list_inputs\nimport update_input\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-west2\"\ninput_id = f\"fastly-reid-input-{uuid.uuid4()}\"\n\ndef test_input_operations(capsys: pytest.fixture) -\u003e None:"},{"isSelected":true},{"content":"\n    # Clean up old resources in the test project\n    responses = list_inputs.list_inputs(project_name, location)\n    for response in responses:\n        next_input_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_input.delete_input(project_name, location, next_input_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    input_name_project_id = (\n        f\"projects/se-development-9566/locations/us-west2/inputs/fastly-reid-input\"\n    )\n\n    # Tests\n\n    response = create_input.create_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    list_inputs.list_inputs(project_name, location)\n    out, _ = capsys.readouterr()\n    assert input_name_project_id in out\n\n    response = update_input.update_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n    assert response.preprocessing_config.crop.top_pixels == 5\n\n    response = get_input.get_input(project_name, location, input_id)\n    assert input_name_project_id in response.name\n\n    response = delete_input.delete_input(project_name, location, input_id)\n    assert response == empty.Empty()\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/asset_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_asset\nimport delete_asset\nimport get_asset\nimport list_assets\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\nasset_id = f\"my-python-test-asset-{uuid.uuid4()}\"\nasset_uri = \"gs://cloud-samples-data/media/ForBiggerEscapes.mp4\"\n\n\ndef test_asset_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    responses = list_assets.list_assets(project_name, location)\n    for response in responses:\n        next_asset_id = response.name.rsplit(\"/\", 1)[-1]\n        if utils.is_resource_stale(response.create_time):\n            try:\n                delete_asset.delete_asset(project_name, location, next_asset_id)\n            except FailedPrecondition as e:\n                print(f\"Ignoring FailedPrecondition, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n    asset_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/assets/{asset_id}\"\n    )\n\n    # Tests\n\n    response = create_asset.create_asset(project_name, location, asset_id, asset_uri)\n    assert asset_name_project_id in response.name\n\n    list_assets.list_assets(project_name, location)\n    out, _ = capsys.readouterr()\n    assert asset_name_project_id in out\n\n    response = get_asset.get_asset(project_name, location, asset_id)\n    assert asset_name_project_id in response.name\n\n    response = delete_asset.delete_asset(project_name, location, asset_id)\n    assert response == empty.Empty()\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nfrom google.api_core.exceptions import FailedPrecondition, NotFound\nfrom google.protobuf import empty_pb2 as empty\nimport pytest\n\nimport create_channel\nimport create_channel_with_backup_input\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel\nimport list_channel_events\nimport list_channels\nimport start_channel\nimport stop_channel\nimport update_channel\nimport utils\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nupdated_input_id = f\"python-test-up-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_operations(capsys: pytest.fixture) -\u003e None:\n    # Clean up old resources in the test project\n    channel_responses = list_channels.list_channels(project_name, location)\n\n    for response in channel_responses:\n        next_channel_id = response.name.rsplit(\"/\", 1)[-1]\n        input_attachments = response.input_attachments\n        if utils.is_resource_stale(response.create_time):\n            try:\n                event_responses = list_channel_events.list_channel_events(\n                    project_name, location, next_channel_id\n                )\n                for response in event_responses:\n                    next_event_id = response.name.rsplit(\"/\", 1)[-1]\n                    try:\n                        delete_channel_event.delete_channel_event(\n                            project_name, location, next_channel_id, next_event_id\n                        )\n                    except NotFound as e:\n                        print(f\"Ignoring NotFound, details: {e}\")\n                try:\n                    stop_channel.stop_channel(project_name, location, next_channel_id)\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, details: {e}\")\n                try:\n                    delete_channel.delete_channel(\n                        project_name, location, next_channel_id\n                    )\n                except FailedPrecondition as e:\n                    print(f\"Ignoring FailedPrecondition, try to stop channel: {e}\")\n                    try:\n                        stop_channel.stop_channel(\n                            project_name, location, next_channel_id\n                        )\n                    except FailedPrecondition as e:\n                        print(f\"Ignoring FailedPrecondition, details: {e}\")\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n            except NotFound as e:\n                print(f\"Ignoring NotFound, details: {e}\")\n\n            for input_attachment in input_attachments:\n                next_input_id = input_attachment.input.rsplit(\"/\", 1)[-1]\n                try:\n                    delete_input.delete_input(project_name, location, next_input_id)\n                except NotFound as e:\n                    print(f\"Ignoring NotFound, details: {e}\")\n\n    # Set up\n\n    channel_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/channels/{channel_id}\"\n    )\n\n    create_input.create_input(project_name, location, input_id)\n    create_input.create_input(project_name, location, updated_input_id)\n\n    # Tests\n\n    response = create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    list_channels.list_channels(project_name, location)\n    out, _ = capsys.readouterr()\n    assert channel_name_project_id in out\n\n    response = update_channel.update_channel(\n        project_name, location, channel_id, updated_input_id\n    )\n    assert channel_name_project_id in response.name\n    for input_attachment in response.input_attachments:\n        assert \"updated-input\" in input_attachment.key\n\n    response = get_channel.get_channel(project_name, location, channel_id)\n    assert channel_name_project_id in response.name\n\n    start_channel.start_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Started channel\" in out\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert \"Stopped channel\" in out\n\n    response = delete_channel.delete_channel(project_name, location, channel_id)\n    assert response == empty.Empty()\n\n    response = create_channel_with_backup_input.create_channel_with_backup_input(\n        project_name, location, channel_id, input_id, updated_input_id, output_uri\n    )\n    assert channel_name_project_id in response.name\n\n    # Clean up\n\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n    delete_input.delete_input(project_name, location, updated_input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/channel_event_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport uuid\n\nimport pytest\n\nimport create_channel\nimport create_channel_event\nimport create_input\nimport delete_channel\nimport delete_channel_event\nimport delete_input\nimport get_channel_event\nimport list_channel_events\nimport start_channel\nimport stop_channel\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\ninput_id = f\"python-test-input-{uuid.uuid4()}\"\nchannel_id = f\"python-test-channel-{uuid.uuid4()}\"\nevent_id = f\"python-test-event-{uuid.uuid4()}\"\noutput_bucket_name = f\"python-test-bucket-{uuid.uuid4()}\"\noutput_uri = f\"gs://{output_bucket_name}/channel-test/\"\n\n\ndef test_channel_event_operations(capsys: pytest.fixture) -\u003e None:\n    # Set up\n\n    event_name_project_id = f\"projects/{project_name}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    create_input.create_input(project_name, location, input_id)\n\n    create_channel.create_channel(\n        project_name, location, channel_id, input_id, output_uri\n    )\n\n    start_channel.start_channel(project_name, location, channel_id)\n\n    # Tests\n\n    response = create_channel_event.create_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    response = get_channel_event.get_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert event_name_project_id in response.name\n\n    list_channel_events.list_channel_events(project_name, location, channel_id)\n    out, _ = capsys.readouterr()\n    assert event_name_project_id in out\n\n    response = delete_channel_event.delete_channel_event(\n        project_name, location, channel_id, event_id\n    )\n    assert response is None\n\n    # Clean up\n\n    stop_channel.stop_channel(project_name, location, channel_id)\n    delete_channel.delete_channel(project_name, location, channel_id)\n    delete_input.delete_input(project_name, location, input_id)\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/utils.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom google.protobuf import timestamp_pb2\n\nseconds_per_hour = 3600\n\n\ndef is_resource_stale(create_time: str) -\u003e bool:\n    \"\"\"Checks the create timestamp to see if the resource is stale (and should be deleted).\n    Args:\n        create_time: Creation time in Timestamp format.\"\"\"\n    timestamp = timestamp_pb2.Timestamp()\n    timestamp.FromDatetime(create_time)\n    now = timestamp_pb2.Timestamp()\n    now.GetCurrentTime()\n    if (now.seconds - timestamp.seconds) \u003e (3 * seconds_per_hour):\n        return True\n    else:\n        return False\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-input\"\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-b5126f89-768e-4ac1-82e8-7584c2f94ca9","userMessage":"i am running it from cloud shell and expecting to see an output value of 'operation_id'"}
I0902 12:17:07.579156    9143 conversation.go:207] conversation response for request #33 (TraceID:c74de518720c61da) &{Entity:SYSTEM MarkdownText:The issue is that your `create_input.create_input` function in `input_test.py` doesn't explicitly print the `operation_id`. It only prints the input name. 

Here's how to modify your code to print the `operation_id`:

**1. Update `create_input.py`:**

```python
# ... other imports ...
from google.api_core.operation import Operation

# ... (rest of your code) ...

def create_input(
    project_id: str, location: str, input_id: str
) -> live_stream_v1.types.Input:
    """Creates an input.
    Args:
        project_id: se-development-9566
        location: us-west2
        input_id: fastly-live-input"""

    client = LivestreamServiceClient()

    parent = f"projects/se-development-9566/locations/us-west2"

    input = live_stream_v1.types.Input(
        type_="RTMP_PUSH",
    )
    operation: Operation = client.create_input(parent=parent, input=input, input_id=input_id)  # type hint added
    response = operation.result(900)
    print(f"Input: {response.name}")
    print(f"Operation ID: {operation.operation.name}")  # Print operation ID

    return response

# ... (rest of your code) ...
```

**2. Run your test:**

Now when you run `input_test.py` from Cloud Shell, you should see both the input name and the `operation_id` printed to the console. 

**Explanation:**

* The `client.create_input()` method returns an `Operation` object.
* The `Operation` object has an attribute `operation` which in turn has a `name` attribute. This `name` represents the `operation_id`.
* By adding `print(f"Operation ID: {operation.operation.name}")`, you explicitly print the `operation_id` to the console. 

Let me know if you have any other questions! Citations:[] IDEContext:0xc0010ba180}
W0902 12:18:39.874945    9143 document.go:231] Error computing chars added only: getting byte offset for end of change range: invalid line number
W0902 12:19:03.590778    9143 document.go:231] Error computing chars added only: getting byte offset for end of change range: invalid column number
I0902 12:19:22.094201    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
W0902 12:19:23.809800    9143 document.go:231] Error computing chars added only: getting byte offset for end of change range: invalid column number
Completion Provider - completion # 0 - Typed over previous completion
Completion Provider - completion # 0 - New completion requested from language client at position {"line":42,"character":36}, triggerKind=1
I0902 12:19:54.524047    9143 handler.go:142] cancel was requested for: 115, needs to be canceled: true
Completion Provider - completion # 0 - Typed over previous completion
Completion Provider - completion # 1 - New completion requested from language client at position {"line":42,"character":37}, triggerKind=1
I0902 12:19:54.875080    9143 completion.go:221] Inline suggestion requested (request #116): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:42 Character:37}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:1}
I0902 12:19:54.879082    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input99"},{"isSelected":true},{"content":"\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-input\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-489d37b5-dbf2-4fe1-bfb3-8773a1d48704"}
I0902 12:19:55.371703    9143 completion.go:418] Code complete response for request #116 after post-processing: &{Suggestions:[{Content:9
     Citations:[] Score:-1.8069814}] TraceID:0ac5ae6ce98bfaf2 ServerContext:febf27497eece1f6 RequestID:cloudcode-648796832-489d37b5-dbf2-4fe1-bfb3-8773a1d48704 ServerTiming:gfet4t7; dur=477 NetPlusServerTiming:492.105249ms FromCache:false Typeover:false TriggerMode:0 ProcessingDetails:{RagStatus: AtlasExperience: PromptID:}}
Received completion response from language server with 1 valid responses and 0 responses that have been filtered out
Completion Provider - completion # 1 - Completion result obtained from language client
Completion Provider - completion # 1 - Typed over previous completion
Completion Provider - completion # 2 - New completion requested from language client at position {"line":65,"character":27}, triggerKind=1
I0902 12:20:00.156779    9143 handler.go:142] cancel was requested for: 124, needs to be canceled: true
Completion Provider - completion # 1 - Typed over previous completion
Completion Provider - completion # 3 - New completion requested from language client at position {"line":65,"character":28}, triggerKind=1
I0902 12:20:00.504491    9143 completion.go:221] Inline suggestion requested (request #126): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:65 Character:28}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:3}
I0902 12:20:00.508579    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input99\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-input99"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-ce260e79-0f1d-4c90-96a9-087596661781"}
I0902 12:20:01.024009    9143 completion.go:418] Code complete response for request #126 after post-processing: &{Suggestions:[] TraceID:e5d014387de503a4 ServerContext:febf27497eece1f6 RequestID:cloudcode-648796832-ce260e79-0f1d-4c90-96a9-087596661781 ServerTiming:gfet4t7; dur=506 NetPlusServerTiming:510.544598ms FromCache:false Typeover:false TriggerMode:0 ProcessingDetails:{RagStatus: AtlasExperience: PromptID:}}
Completion Provider - completion # 3 - Completion result obtained from language client
I0902 12:20:22.094370    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
I0902 12:21:22.093988    9143 life_cycle.go:226] codeReportBasicEvery: recomputing codereportbasic metric
I0902 12:23:09.546375    9143 conversation.go:130] conversation requested (request #134): {Input:I have made the update but do still not see an Operation_ID in the response DocumentURI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py SelectedRange:{Start:{Line:53 Character:36} End:{Line:53 Character:36}} PrependInput:}
I0902 12:23:09.550112    9143 client.go:182] GenerateChat request: {"history":[{"author":"USER","content":"why do i not get an output when i run this python file? "},{"author":"SYSTEM","content":"Unfortunately, I need more information to understand why you're not getting an output when running your Python file.  \"No output\" can mean a few things, and the potential causes are diverse. \n\nTo help you debug, please provide the following:\n\n* **The full code of `input_test.py`:** The snippet you shared only shows part of the file.\n* **How are you running the file?**  Are you using:\n    * `python input_test.py` from the command line?\n    * An IDE's run button?\n    * Something else?\n* **What *do* you see in the output?** Is it completely blank?  Do you get errors?\n* **What *were* you expecting to see?**  Describe the desired output.\n\nOnce I have this information, I can give you much more specific guidance!"},{"author":"USER","content":"i am running it from cloud shell and expecting to see an output value of 'operation_id'"},{"author":"SYSTEM","content":"The issue is that your `create_input.create_input` function in `input_test.py` doesn't explicitly print the `operation_id`. It only prints the input name. \n\nHere's how to modify your code to print the `operation_id`:\n\n**1. Update `create_input.py`:**\n\n```python\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation: Operation = client.create_input(parent=parent, input=input, input_id=input_id)  # type hint added\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.operation.name}\")  # Print operation ID\n\n    return response\n\n# ... (rest of your code) ...\n```\n\n**2. Run your test:**\n\nNow when you run `input_test.py` from Cloud Shell, you should see both the input name and the `operation_id` printed to the console. \n\n**Explanation:**\n\n* The `client.create_input()` method returns an `Operation` object.\n* The `Operation` object has an attribute `operation` which in turn has a `name` attribute. This `name` represents the `operation_id`.\n* By adding `print(f\"Operation ID: {operation.operation.name}\")`, you explicitly print the `operation_id` to the console. \n\nLet me know if you have any other questions!"}],"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input99\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")"},{"isSelected":true},{"content":"\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-input99\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel event. An event is a\n    sub-resource of a channel, which can be scheduled by the user to execute\n    operations on a channel resource without having to stop the channel.\nExample usage:\n    python create_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_create_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Creates a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    event = live_stream_v1.types.Event(\n        name=name,\n        ad_break=live_stream_v1.types.Event.AdBreakTask(\n            duration=duration.Duration(\n                seconds=30,\n            ),\n        ),\n        execute_now=True,\n    )\n\n    response = client.create_event(parent=parent, event=event, event_id=event_id)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel. A channel resource\n    represents the processor that performs a user-defined \"streaming\" operation.\nExample usage:\n    python create_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --input_id \u003cinput-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel(\n    project_id: str, location: str, channel_id: str, input_id: str, output_uri: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        input_id: The user-defined input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    input = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-input\",\n                input=input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_with_backup_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel with a backup input.\n    A channel resource represents the processor that performs a user-defined\n    \"streaming\" operation.\nExample usage:\n    python create_channel_with_backup_input.py --project_id \u003cproject-id\u003e \\\n        --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e \\\n        --primary_input_id \u003cprimary-input-id\u003e \\\n        --backup_input_id \u003cbackup-input-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel_with_backup_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_with_backup_input(\n    project_id: str,\n    location: str,\n    channel_id: str,\n    primary_input_id: str,\n    backup_input_id: str,\n    output_uri: str,\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        primary_input_id: The user-defined primary input ID.\n        backup_input_id: The user-defined backup input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    primary_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{primary_input_id}\"\n    )\n    backup_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{backup_input_id}\"\n    )\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-primary-input\",\n                input=primary_input,\n                automatic_failover=live_stream_v1.types.InputAttachment.AutomaticFailover(\n                    input_keys=[\"my-backup-input\"],\n                ),\n            ),\n            live_stream_v1.types.InputAttachment(\n                key=\"my-backup-input\",\n                input=backup_input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_with_backup_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--primary_input_id\",\n        help=\"The user-defined primary input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--backup_input_id\",\n        help=\"The user-defined backup input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_with_backup_input(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.primary_input_id,\n        args.backup_input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-c7309d57-0f72-4f67-ba16-5bce9dd9066e","userMessage":"I have made the update but do still not see an Operation_ID in the response"}
I0902 12:23:21.259458    9143 conversation.go:207] conversation response for request #134 (TraceID:df40b5ce6c480a00) &{Entity:SYSTEM MarkdownText:You're very close! The issue is a subtle difference in how the `operation` object exposes the ID.  You're accessing `operation.operation.name`, but it should be **`operation.name`** directly.

Here's the corrected `create_input.py` function:

```python
def create_input(
    project_id: str, location: str, input_id: str
) -> live_stream_v1.types.Input:
    """Creates an input.
    Args:
        project_id: se-development-9566
        location: us-west2
        input_id: fastly-live-input"""

    client = LivestreamServiceClient()

    parent = f"projects/se-development-9566/locations/us-west2"

    input = live_stream_v1.types.Input(
        type_="RTMP_PUSH",
    )
    operation = client.create_input(parent=parent, input=input, input_id=input_id)
    response = operation.result(900)
    print(f"Input: {response.name}")
    print(f"Operation ID: {operation.name}")  # Correct way to get operation ID

    return response
```

**Explanation:**

* The `operation` object itself represents the ongoing operation.
* Its `name` attribute directly holds the operation ID.

With this change, you should now see the `Operation ID` printed alongside the `Input` name when you run your script. Citations:[] IDEContext:0xc00082c400}
W0902 12:23:59.813928    9143 document.go:231] Error computing chars added only: getting byte offset for end of change range: invalid column number
I0902 12:24:08.001661    9143 handler.go:142] cancel was requested for: 160, needs to be canceled: true
I0902 12:24:08.001732    9143 handler.go:129] req #160 skipped: context canceled
Completion Provider - completion # 0 - Typed over previous completion
Completion Provider - completion # 4 - New completion requested from language client at position {"line":66,"character":29}, triggerKind=1
I0902 12:24:14.620696    9143 completion.go:221] Inline suggestion requested (request #166): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:66 Character:29}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:4}
I0902 12:24:14.624059    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.name}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-input999"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-6f74c937-d596-4e48-9b4d-0930834afa41"}
I0902 12:24:15.085427    9143 completion.go:418] Code complete response for request #166 after post-processing: &{Suggestions:[] TraceID:7fbdd4c054dd03d9 ServerContext:febf27497eece1f6 RequestID:cloudcode-648796832-6f74c937-d596-4e48-9b4d-0930834afa41 ServerTiming:gfet4t7; dur=455 NetPlusServerTiming:461.010526ms FromCache:false Typeover:false TriggerMode:0 ProcessingDetails:{RagStatus: AtlasExperience: PromptID:}}
Completion Provider - completion # 4 - Completion result obtained from language client
I0902 12:24:22.093966    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
Completion Provider - completion # 4 - Typed over previous completion
Completion Provider - completion # 5 - New completion requested from language client at position {"line":54,"character":38}, triggerKind=1
I0902 12:25:02.900730    9143 handler.go:142] cancel was requested for: 181, needs to be canceled: true
Completion Provider - completion # 4 - Typed over previous completion
Completion Provider - completion # 6 - New completion requested from language client at position {"line":54,"character":37}, triggerKind=1
I0902 12:25:03.254788    9143 completion.go:221] Inline suggestion requested (request #183): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:54 Character:37}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:6}
Completion Provider - completion # 6 - Completion result obtained from language client
Completion Provider - completion # 6 - Typed over previous completion
Completion Provider - completion # 7 - New completion requested from language client at position {"line":54,"character":37}, triggerKind=1
I0902 12:25:05.227370    9143 completion.go:221] Inline suggestion requested (request #188): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:54 Character:37}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:7}
Completion Provider - completion # 7 - Completion result obtained from language client
Completion Provider - completion # 7 - Typed over previous completion
Completion Provider - completion # 8 - New completion requested from language client at position {"line":54,"character":37}, triggerKind=1
I0902 12:25:08.626972    9143 completion.go:221] Inline suggestion requested (request #194): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:54 Character:37}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:8}
Completion Provider - completion # 8 - Completion result obtained from language client
Completion Provider - completion # 8 - Typed over previous completion
Completion Provider - completion # 9 - New completion requested from language client at position {"line":54,"character":36}, triggerKind=1
I0902 12:25:09.146541    9143 completion.go:221] Inline suggestion requested (request #197): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:54 Character:36}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:9}
Completion Provider - completion # 9 - Completion result obtained from language client
W0902 12:25:20.290292    9143 document.go:231] Error computing chars added only: getting byte offset for end of change range: invalid column number
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 10 - New completion requested from language client at position {"line":66,"character":22}, triggerKind=1
I0902 12:25:20.634030    9143 completion.go:221] Inline suggestion requested (request #205): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:66 Character:22}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:10}
I0902 12:25:20.637788    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-i"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-468ccbe7-55c0-4a33-a822-8c65170388a4"}
I0902 12:25:20.917681    9143 handler.go:142] cancel was requested for: 205, needs to be canceled: true
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 11 - New completion requested from language client at position {"line":66,"character":21}, triggerKind=1
I0902 12:25:21.185008    9143 handler.go:142] cancel was requested for: 208, needs to be canceled: true
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 12 - New completion requested from language client at position {"line":66,"character":22}, triggerKind=1
I0902 12:25:21.247227    9143 handler.go:142] cancel was requested for: 211, needs to be canceled: true
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 13 - New completion requested from language client at position {"line":66,"character":23}, triggerKind=1
I0902 12:25:21.469299    9143 handler.go:142] cancel was requested for: 212, needs to be canceled: true
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 14 - New completion requested from language client at position {"line":66,"character":24}, triggerKind=1
I0902 12:25:21.621589    9143 handler.go:142] cancel was requested for: 214, needs to be canceled: true
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 15 - New completion requested from language client at position {"line":66,"character":25}, triggerKind=1
I0902 12:25:21.964652    9143 handler.go:142] cancel was requested for: 216, needs to be canceled: true
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 16 - New completion requested from language client at position {"line":66,"character":26}, triggerKind=1
I0902 12:25:22.093788    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
I0902 12:25:22.185004    9143 handler.go:142] cancel was requested for: 219, needs to be canceled: true
Completion Provider - completion # 9 - Typed over previous completion
Completion Provider - completion # 17 - New completion requested from language client at position {"line":66,"character":27}, triggerKind=1
I0902 12:25:22.534590    9143 completion.go:221] Inline suggestion requested (request #221): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:66 Character:27}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:17}
I0902 12:25:22.538310    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-source"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-6e9ff130-1690-4059-b78b-b113e898830f"}
I0902 12:25:23.018748    9143 completion.go:418] Code complete response for request #221 after post-processing: &{Suggestions:[] TraceID:41852e03c2d0a27f ServerContext:febf27497eece1f6 RequestID:cloudcode-648796832-6e9ff130-1690-4059-b78b-b113e898830f ServerTiming:gfet4t7; dur=475 NetPlusServerTiming:479.937763ms FromCache:false Typeover:false TriggerMode:0 ProcessingDetails:{RagStatus: AtlasExperience: PromptID:}}
Completion Provider - completion # 17 - Completion result obtained from language client
I0902 12:26:22.094168    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
I0902 12:31:22.094084    9143 life_cycle.go:226] codeReportBasicEvery: recomputing codereportbasic metric
I0902 12:51:35.478282    9143 conversation.go:130] conversation requested (request #226): {Input:what is wrong with the googlr rpc formatting of this url:  https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/0x7f5f76c69780 DocumentURI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py SelectedRange:{Start:{Line:66 Character:27} End:{Line:66 Character:27}} PrependInput:}
I0902 12:51:35.483383    9143 client.go:182] GenerateChat request: {"history":[{"author":"USER","content":"why do i not get an output when i run this python file? "},{"author":"SYSTEM","content":"Unfortunately, I need more information to understand why you're not getting an output when running your Python file.  \"No output\" can mean a few things, and the potential causes are diverse. \n\nTo help you debug, please provide the following:\n\n* **The full code of `input_test.py`:** The snippet you shared only shows part of the file.\n* **How are you running the file?**  Are you using:\n    * `python input_test.py` from the command line?\n    * An IDE's run button?\n    * Something else?\n* **What *do* you see in the output?** Is it completely blank?  Do you get errors?\n* **What *were* you expecting to see?**  Describe the desired output.\n\nOnce I have this information, I can give you much more specific guidance!"},{"author":"USER","content":"i am running it from cloud shell and expecting to see an output value of 'operation_id'"},{"author":"SYSTEM","content":"The issue is that your `create_input.create_input` function in `input_test.py` doesn't explicitly print the `operation_id`. It only prints the input name. \n\nHere's how to modify your code to print the `operation_id`:\n\n**1. Update `create_input.py`:**\n\n```python\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation: Operation = client.create_input(parent=parent, input=input, input_id=input_id)  # type hint added\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.operation.name}\")  # Print operation ID\n\n    return response\n\n# ... (rest of your code) ...\n```\n\n**2. Run your test:**\n\nNow when you run `input_test.py` from Cloud Shell, you should see both the input name and the `operation_id` printed to the console. \n\n**Explanation:**\n\n* The `client.create_input()` method returns an `Operation` object.\n* The `Operation` object has an attribute `operation` which in turn has a `name` attribute. This `name` represents the `operation_id`.\n* By adding `print(f\"Operation ID: {operation.operation.name}\")`, you explicitly print the `operation_id` to the console. \n\nLet me know if you have any other questions!"},{"author":"USER","content":"I have made the update but do still not see an Operation_ID in the response"},{"author":"SYSTEM","content":"You're very close! The issue is a subtle difference in how the `operation` object exposes the ID.  You're accessing `operation.operation.name`, but it should be **`operation.name`** directly.\n\nHere's the corrected `create_input.py` function:\n\n```python\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.name}\")  # Correct way to get operation ID\n\n    return response\n```\n\n**Explanation:**\n\n* The `operation` object itself represents the ongoing operation.\n* Its `name` attribute directly holds the operation ID.\n\nWith this change, you should now see the `Operation ID` printed alongside the `Input` name when you run your script."}],"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-source"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel event. An event is a\n    sub-resource of a channel, which can be scheduled by the user to execute\n    operations on a channel resource without having to stop the channel.\nExample usage:\n    python create_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_create_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Creates a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    event = live_stream_v1.types.Event(\n        name=name,\n        ad_break=live_stream_v1.types.Event.AdBreakTask(\n            duration=duration.Duration(\n                seconds=30,\n            ),\n        ),\n        execute_now=True,\n    )\n\n    response = client.create_event(parent=parent, event=event, event_id=event_id)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel. A channel resource\n    represents the processor that performs a user-defined \"streaming\" operation.\nExample usage:\n    python create_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --input_id \u003cinput-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel(\n    project_id: str, location: str, channel_id: str, input_id: str, output_uri: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        input_id: The user-defined input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    input = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-input\",\n                input=input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_with_backup_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel with a backup input.\n    A channel resource represents the processor that performs a user-defined\n    \"streaming\" operation.\nExample usage:\n    python create_channel_with_backup_input.py --project_id \u003cproject-id\u003e \\\n        --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e \\\n        --primary_input_id \u003cprimary-input-id\u003e \\\n        --backup_input_id \u003cbackup-input-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel_with_backup_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_with_backup_input(\n    project_id: str,\n    location: str,\n    channel_id: str,\n    primary_input_id: str,\n    backup_input_id: str,\n    output_uri: str,\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        primary_input_id: The user-defined primary input ID.\n        backup_input_id: The user-defined backup input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    primary_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{primary_input_id}\"\n    )\n    backup_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{backup_input_id}\"\n    )\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-primary-input\",\n                input=primary_input,\n                automatic_failover=live_stream_v1.types.InputAttachment.AutomaticFailover(\n                    input_keys=[\"my-backup-input\"],\n                ),\n            ),\n            live_stream_v1.types.InputAttachment(\n                key=\"my-backup-input\",\n                input=backup_input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_with_backup_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--primary_input_id\",\n        help=\"The user-defined primary input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--backup_input_id\",\n        help=\"The user-defined backup input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_with_backup_input(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.primary_input_id,\n        args.backup_input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-b8d1d964-117d-40c4-93cf-1ef5c2b84111","userMessage":"what is wrong with the googlr rpc formatting of this url:  https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/0x7f5f76c69780"}
I0902 12:51:46.453637    9143 conversation.go:207] conversation response for request #226 (TraceID:be88e4a99e12e176) &{Entity:SYSTEM MarkdownText:The URL you provided (`https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/0x7f5f76c69780`) seems to be incorrectly formatted for a Google RPC API request. Specifically, the issue lies in the `operation` ID portion:

* **Hexadecimal format:** The operation ID (`0x7f5f76c69780`) is in hexadecimal format (prefixed with `0x`). Google RPC API operation IDs are typically represented as strings.

**How to fix it:**

1. **Remove the `0x` prefix:**  Change `0x7f5f76c69780` to `7f5f76c69780`.

The corrected URL should look like this:

```
https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/7f5f76c69780
```

**Additional Notes:**

* **Operation ID format:** Operation IDs are usually generated by the API and returned in the response when you initiate a long-running operation. Make sure you are using the correct ID provided by the API.
* **API documentation:** Always refer to the Google Live Stream API documentation ([https://cloud.google.com/livestream/docs/reference](https://cloud.google.com/livestream/docs/reference)) for the correct URL structure and request parameters.

If you are still encountering issues, please provide more context about how you are making the request and the specific error message you are receiving. Citations:[] IDEContext:0xc00170e100}
I0902 12:53:59.689864    9143 conversation.go:130] conversation requested (request #227): {Input:why is there no resource found for this rpc reques DocumentURI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py SelectedRange:{Start:{Line:66 Character:27} End:{Line:66 Character:27}} PrependInput:}
I0902 12:53:59.694579    9143 client.go:182] GenerateChat request: {"history":[{"author":"USER","content":"why do i not get an output when i run this python file? "},{"author":"SYSTEM","content":"Unfortunately, I need more information to understand why you're not getting an output when running your Python file.  \"No output\" can mean a few things, and the potential causes are diverse. \n\nTo help you debug, please provide the following:\n\n* **The full code of `input_test.py`:** The snippet you shared only shows part of the file.\n* **How are you running the file?**  Are you using:\n    * `python input_test.py` from the command line?\n    * An IDE's run button?\n    * Something else?\n* **What *do* you see in the output?** Is it completely blank?  Do you get errors?\n* **What *were* you expecting to see?**  Describe the desired output.\n\nOnce I have this information, I can give you much more specific guidance!"},{"author":"USER","content":"i am running it from cloud shell and expecting to see an output value of 'operation_id'"},{"author":"SYSTEM","content":"The issue is that your `create_input.create_input` function in `input_test.py` doesn't explicitly print the `operation_id`. It only prints the input name. \n\nHere's how to modify your code to print the `operation_id`:\n\n**1. Update `create_input.py`:**\n\n```python\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation: Operation = client.create_input(parent=parent, input=input, input_id=input_id)  # type hint added\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.operation.name}\")  # Print operation ID\n\n    return response\n\n# ... (rest of your code) ...\n```\n\n**2. Run your test:**\n\nNow when you run `input_test.py` from Cloud Shell, you should see both the input name and the `operation_id` printed to the console. \n\n**Explanation:**\n\n* The `client.create_input()` method returns an `Operation` object.\n* The `Operation` object has an attribute `operation` which in turn has a `name` attribute. This `name` represents the `operation_id`.\n* By adding `print(f\"Operation ID: {operation.operation.name}\")`, you explicitly print the `operation_id` to the console. \n\nLet me know if you have any other questions!"},{"author":"USER","content":"I have made the update but do still not see an Operation_ID in the response"},{"author":"SYSTEM","content":"You're very close! The issue is a subtle difference in how the `operation` object exposes the ID.  You're accessing `operation.operation.name`, but it should be **`operation.name`** directly.\n\nHere's the corrected `create_input.py` function:\n\n```python\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.name}\")  # Correct way to get operation ID\n\n    return response\n```\n\n**Explanation:**\n\n* The `operation` object itself represents the ongoing operation.\n* Its `name` attribute directly holds the operation ID.\n\nWith this change, you should now see the `Operation ID` printed alongside the `Input` name when you run your script."},{"author":"USER","content":"what is wrong with the googlr rpc formatting of this url:  https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/0x7f5f76c69780"},{"author":"SYSTEM","content":"The URL you provided (`https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/0x7f5f76c69780`) seems to be incorrectly formatted for a Google RPC API request. Specifically, the issue lies in the `operation` ID portion:\n\n* **Hexadecimal format:** The operation ID (`0x7f5f76c69780`) is in hexadecimal format (prefixed with `0x`). Google RPC API operation IDs are typically represented as strings.\n\n**How to fix it:**\n\n1. **Remove the `0x` prefix:**  Change `0x7f5f76c69780` to `7f5f76c69780`.\n\nThe corrected URL should look like this:\n\n```\nhttps://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/7f5f76c69780\n```\n\n**Additional Notes:**\n\n* **Operation ID format:** Operation IDs are usually generated by the API and returned in the response when you initiate a long-running operation. Make sure you are using the correct ID provided by the API.\n* **API documentation:** Always refer to the Google Live Stream API documentation ([https://cloud.google.com/livestream/docs/reference](https://cloud.google.com/livestream/docs/reference)) for the correct URL structure and request parameters.\n\nIf you are still encountering issues, please provide more context about how you are making the request and the specific error message you are receiving."}],"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-source"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel event. An event is a\n    sub-resource of a channel, which can be scheduled by the user to execute\n    operations on a channel resource without having to stop the channel.\nExample usage:\n    python create_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_create_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Creates a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    event = live_stream_v1.types.Event(\n        name=name,\n        ad_break=live_stream_v1.types.Event.AdBreakTask(\n            duration=duration.Duration(\n                seconds=30,\n            ),\n        ),\n        execute_now=True,\n    )\n\n    response = client.create_event(parent=parent, event=event, event_id=event_id)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel. A channel resource\n    represents the processor that performs a user-defined \"streaming\" operation.\nExample usage:\n    python create_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --input_id \u003cinput-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel(\n    project_id: str, location: str, channel_id: str, input_id: str, output_uri: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        input_id: The user-defined input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    input = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-input\",\n                input=input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_with_backup_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel with a backup input.\n    A channel resource represents the processor that performs a user-defined\n    \"streaming\" operation.\nExample usage:\n    python create_channel_with_backup_input.py --project_id \u003cproject-id\u003e \\\n        --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e \\\n        --primary_input_id \u003cprimary-input-id\u003e \\\n        --backup_input_id \u003cbackup-input-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel_with_backup_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_with_backup_input(\n    project_id: str,\n    location: str,\n    channel_id: str,\n    primary_input_id: str,\n    backup_input_id: str,\n    output_uri: str,\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        primary_input_id: The user-defined primary input ID.\n        backup_input_id: The user-defined backup input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    primary_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{primary_input_id}\"\n    )\n    backup_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{backup_input_id}\"\n    )\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-primary-input\",\n                input=primary_input,\n                automatic_failover=live_stream_v1.types.InputAttachment.AutomaticFailover(\n                    input_keys=[\"my-backup-input\"],\n                ),\n            ),\n            live_stream_v1.types.InputAttachment(\n                key=\"my-backup-input\",\n                input=backup_input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_with_backup_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--primary_input_id\",\n        help=\"The user-defined primary input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--backup_input_id\",\n        help=\"The user-defined backup input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_with_backup_input(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.primary_input_id,\n        args.backup_input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-fe8e38c0-edda-4e4a-b463-fa19f43d4245","userMessage":"why is there no resource found for this rpc reques"}
I0902 12:54:08.947592    9143 conversation.go:207] conversation response for request #227 (TraceID:64a8374a476beacf) &{Entity:SYSTEM MarkdownText:The issue is likely not with the RPC request itself, but rather with one or more of the following:

* **Incorrect Operation ID:** The operation ID (`operation`) you're using might be invalid or expired. Double-check that you're using the correct ID returned by the `client.create_input()` call.
* **Timing Issue:** You might be trying to access the operation resource before it's fully created. The `operation.result(900)` call waits for 900 seconds, but there's a chance the operation takes longer.
* **Permissions Problem:** The account or service account making the request might not have the necessary permissions to access the operation resource. Ensure that the account has the required IAM roles for Live Stream API.

**To troubleshoot further, please provide the following:**

* **Complete Error Message:** Share the full error message you're getting, including any error codes or details.
* **Code Snippet:** Provide the relevant code snippet where you're making the RPC request and handling the response.
* **Operation ID:** If possible, share the operation ID you're using (while being mindful of security if it contains sensitive information).

With more information, I can give you more specific guidance on resolving the "resource not found" error. Citations:[] IDEContext:0xc000fa6080}
I0902 12:54:27.263906    9143 conversation.go:130] conversation requested (request #228): {Input:why is there no resource found for this rpc request?

curl -X GET \
     -H "Authorization: Bearer $(gcloud auth print-access-token)" \
     "https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/7f5f76c69780" DocumentURI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py SelectedRange:{Start:{Line:66 Character:27} End:{Line:66 Character:27}} PrependInput:}
I0902 12:54:27.268536    9143 client.go:182] GenerateChat request: {"history":[{"author":"USER","content":"why do i not get an output when i run this python file? "},{"author":"SYSTEM","content":"Unfortunately, I need more information to understand why you're not getting an output when running your Python file.  \"No output\" can mean a few things, and the potential causes are diverse. \n\nTo help you debug, please provide the following:\n\n* **The full code of `input_test.py`:** The snippet you shared only shows part of the file.\n* **How are you running the file?**  Are you using:\n    * `python input_test.py` from the command line?\n    * An IDE's run button?\n    * Something else?\n* **What *do* you see in the output?** Is it completely blank?  Do you get errors?\n* **What *were* you expecting to see?**  Describe the desired output.\n\nOnce I have this information, I can give you much more specific guidance!"},{"author":"USER","content":"i am running it from cloud shell and expecting to see an output value of 'operation_id'"},{"author":"SYSTEM","content":"The issue is that your `create_input.create_input` function in `input_test.py` doesn't explicitly print the `operation_id`. It only prints the input name. \n\nHere's how to modify your code to print the `operation_id`:\n\n**1. Update `create_input.py`:**\n\n```python\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation: Operation = client.create_input(parent=parent, input=input, input_id=input_id)  # type hint added\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.operation.name}\")  # Print operation ID\n\n    return response\n\n# ... (rest of your code) ...\n```\n\n**2. Run your test:**\n\nNow when you run `input_test.py` from Cloud Shell, you should see both the input name and the `operation_id` printed to the console. \n\n**Explanation:**\n\n* The `client.create_input()` method returns an `Operation` object.\n* The `Operation` object has an attribute `operation` which in turn has a `name` attribute. This `name` represents the `operation_id`.\n* By adding `print(f\"Operation ID: {operation.operation.name}\")`, you explicitly print the `operation_id` to the console. \n\nLet me know if you have any other questions!"},{"author":"USER","content":"I have made the update but do still not see an Operation_ID in the response"},{"author":"SYSTEM","content":"You're very close! The issue is a subtle difference in how the `operation` object exposes the ID.  You're accessing `operation.operation.name`, but it should be **`operation.name`** directly.\n\nHere's the corrected `create_input.py` function:\n\n```python\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation.name}\")  # Correct way to get operation ID\n\n    return response\n```\n\n**Explanation:**\n\n* The `operation` object itself represents the ongoing operation.\n* Its `name` attribute directly holds the operation ID.\n\nWith this change, you should now see the `Operation ID` printed alongside the `Input` name when you run your script."},{"author":"USER","content":"what is wrong with the googlr rpc formatting of this url:  https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/0x7f5f76c69780"},{"author":"SYSTEM","content":"The URL you provided (`https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/0x7f5f76c69780`) seems to be incorrectly formatted for a Google RPC API request. Specifically, the issue lies in the `operation` ID portion:\n\n* **Hexadecimal format:** The operation ID (`0x7f5f76c69780`) is in hexadecimal format (prefixed with `0x`). Google RPC API operation IDs are typically represented as strings.\n\n**How to fix it:**\n\n1. **Remove the `0x` prefix:**  Change `0x7f5f76c69780` to `7f5f76c69780`.\n\nThe corrected URL should look like this:\n\n```\nhttps://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/7f5f76c69780\n```\n\n**Additional Notes:**\n\n* **Operation ID format:** Operation IDs are usually generated by the API and returned in the response when you initiate a long-running operation. Make sure you are using the correct ID provided by the API.\n* **API documentation:** Always refer to the Google Live Stream API documentation ([https://cloud.google.com/livestream/docs/reference](https://cloud.google.com/livestream/docs/reference)) for the correct URL structure and request parameters.\n\nIf you are still encountering issues, please provide more context about how you are making the request and the specific error message you are receiving."},{"author":"USER","content":"why is there no resource found for this rpc reques"},{"author":"SYSTEM","content":"The issue is likely not with the RPC request itself, but rather with one or more of the following:\n\n* **Incorrect Operation ID:** The operation ID (`operation`) you're using might be invalid or expired. Double-check that you're using the correct ID returned by the `client.create_input()` call.\n* **Timing Issue:** You might be trying to access the operation resource before it's fully created. The `operation.result(900)` call waits for 900 seconds, but there's a chance the operation takes longer.\n* **Permissions Problem:** The account or service account making the request might not have the necessary permissions to access the operation resource. Ensure that the account has the required IAM roles for Live Stream API.\n\n**To troubleshoot further, please provide the following:**\n\n* **Complete Error Message:** Share the full error message you're getting, including any error codes or details.\n* **Code Snippet:** Provide the relevant code snippet where you're making the RPC request and handling the response.\n* **Operation ID:** If possible, share the operation ID you're using (while being mindful of security if it contains sensitive information).\n\nWith more information, I can give you more specific guidance on resolving the \"resource not found\" error."}],"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-input\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-source"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an asset.\nExample usage:\n    python delete_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_delete_asset]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_asset(project_id: str, location: str, asset_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    operation = client.delete_asset(name=name)\n    response = operation.result(600)\n    print(\"Deleted asset\")\n\n    return response\n\n\n# [END livestream_delete_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel event. An event is a\n    sub-resource of a channel, which can be scheduled by the user to execute\n    operations on a channel resource without having to stop the channel.\nExample usage:\n    python create_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_create_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Creates a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n\n    event = live_stream_v1.types.Event(\n        name=name,\n        ad_break=live_stream_v1.types.Event.AdBreakTask(\n            duration=duration.Duration(\n                seconds=30,\n            ),\n        ),\n        execute_now=True,\n    )\n\n    response = client.create_event(parent=parent, event=event, event_id=event_id)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel. A channel resource\n    represents the processor that performs a user-defined \"streaming\" operation.\nExample usage:\n    python create_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --input_id \u003cinput-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel(\n    project_id: str, location: str, channel_id: str, input_id: str, output_uri: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        input_id: The user-defined input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    input = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-input\",\n                input=input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_channel_with_backup_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating a channel with a backup input.\n    A channel resource represents the processor that performs a user-defined\n    \"streaming\" operation.\nExample usage:\n    python create_channel_with_backup_input.py --project_id \u003cproject-id\u003e \\\n        --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e \\\n        --primary_input_id \u003cprimary-input-id\u003e \\\n        --backup_input_id \u003cbackup-input-id\u003e --output_uri \u003curi\u003e\n\"\"\"\n\n# [START livestream_create_channel_with_backup_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import duration_pb2 as duration\n\n\ndef create_channel_with_backup_input(\n    project_id: str,\n    location: str,\n    channel_id: str,\n    primary_input_id: str,\n    backup_input_id: str,\n    output_uri: str,\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Creates a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the channel.\n        channel_id: The user-defined channel ID.\n        primary_input_id: The user-defined primary input ID.\n        backup_input_id: The user-defined backup input ID.\n        output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\n\n    client = LivestreamServiceClient()\n    parent = f\"projects/{project_id}/locations/{location}\"\n    primary_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{primary_input_id}\"\n    )\n    backup_input = (\n        f\"projects/{project_id}/locations/{location}/inputs/{backup_input_id}\"\n    )\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n\n    channel = live_stream_v1.types.Channel(\n        name=name,\n        input_attachments=[\n            live_stream_v1.types.InputAttachment(\n                key=\"my-primary-input\",\n                input=primary_input,\n                automatic_failover=live_stream_v1.types.InputAttachment.AutomaticFailover(\n                    input_keys=[\"my-backup-input\"],\n                ),\n            ),\n            live_stream_v1.types.InputAttachment(\n                key=\"my-backup-input\",\n                input=backup_input,\n            ),\n        ],\n        output=live_stream_v1.types.Channel.Output(\n            uri=output_uri,\n        ),\n        elementary_streams=[\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_video\",\n                video_stream=live_stream_v1.types.VideoStream(\n                    h264=live_stream_v1.types.VideoStream.H264CodecSettings(\n                        profile=\"high\",\n                        width_pixels=1280,\n                        height_pixels=720,\n                        bitrate_bps=3000000,\n                        frame_rate=30,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.ElementaryStream(\n                key=\"es_audio\",\n                audio_stream=live_stream_v1.types.AudioStream(\n                    codec=\"aac\", channel_count=2, bitrate_bps=160000\n                ),\n            ),\n        ],\n        mux_streams=[\n            live_stream_v1.types.MuxStream(\n                key=\"mux_video\",\n                elementary_streams=[\"es_video\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n            live_stream_v1.types.MuxStream(\n                key=\"mux_audio\",\n                elementary_streams=[\"es_audio\"],\n                segment_settings=live_stream_v1.types.SegmentSettings(\n                    segment_duration=duration.Duration(\n                        seconds=2,\n                    ),\n                ),\n            ),\n        ],\n        manifests=[\n            live_stream_v1.types.Manifest(\n                file_name=\"manifest.m3u8\",\n                type_=\"HLS\",\n                mux_streams=[\"mux_video\", \"mux_audio\"],\n                max_segment_count=5,\n            ),\n        ],\n    )\n    operation = client.create_channel(\n        parent=parent, channel=channel, channel_id=channel_id\n    )\n    response = operation.result(600)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_channel_with_backup_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the channel.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--primary_input_id\",\n        help=\"The user-defined primary input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--backup_input_id\",\n        help=\"The user-defined backup input ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--output_uri\",\n        help=\"The Cloud Storage bucket (and optional folder) in which to save the livestream output.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_channel_with_backup_input(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.primary_input_id,\n        args.backup_input_id,\n        args.output_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/pool_test.py","includedReason":"COLOCATED","segments":[{"content":"# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport pytest\n\nimport get_pool\n\n# import update_pool\n\nproject_name = os.environ[\"GOOGLE_CLOUD_PROJECT\"]\nlocation = \"us-central1\"\npool_id = \"default\"  # only 1 pool supported per location\npeered_network = \"\"\n\n\ndef test_pool_operations(capsys: pytest.fixture) -\u003e None:\n    pool_name_project_id = (\n        f\"projects/{project_name}/locations/{location}/pools/{pool_id}\"\n    )\n\n    # All channels must be stopped to update the pool. Pool operations take a\n    # long time to complete, so don't run this test on the test network.\n    # response = update_pool.update_pool(project_name, location, pool_id, peered_network)\n    # assert pool_name_project_id in response.name\n    # assert response.network_config.peered_network == peered_network\n\n    response = get_pool.get_pool(project_name, location, pool_id)\n    assert pool_name_project_id in response.name\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-37384b20-28e3-414a-9e64-ee9ecc6c3e81","userMessage":"why is there no resource found for this rpc request?\n\ncurl -X GET \\\n     -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n     \"https://livestream.googleapis.com/v1/projects/525217445238/locations/us-west2/operations/7f5f76c69780\""}
I0902 12:54:43.298697    9143 conversation.go:207] conversation response for request #228 (TraceID:af07861fbe2c68f5) &{Entity:SYSTEM MarkdownText:The "resource not found" error you're getting from the `curl` request to the Live Stream API indicates that the operation with ID `7f5f76c69780` doesn't exist in the specified project and location (`projects/525217445238/locations/us-west2`). 

Here's a breakdown of why this might be happening and how to troubleshoot it:

1. **Operation ID Typos:** Double-check that the operation ID (`7f5f76c69780`) is accurate and doesn't contain any typos. Even a single incorrect character will lead to a "resource not found" error.

2. **Operation Expiration:** Live Stream API operations have a limited lifespan. If the operation completed a while ago or exceeded its timeout, it might have been automatically deleted by the system. 

3. **Incorrect Project or Location:** Verify that you're using the correct Google Cloud project ID (`525217445238`) and location (`us-west2`) in the URL. If the operation was created in a different project or location, you won't be able to access it with this request.

4. **Permissions Issues:** Ensure that the account associated with the access token you're using in the `Authorization` header has the necessary permissions to access Live Stream API resources in the specified project. The account should have roles like `roles/livestream.viewer` or `roles/livestream.editor`.

**Debugging Steps:**

* **Recent Operations:**  Use the `gcloud` CLI or the Live Stream API to list recent operations in your project and location. This will help you confirm if the operation ID exists and its current status:
   ```bash
   gcloud livestream operations list --location=us-west2 --project=525217445238
   ```

* **Operation Details:** If you find the operation in the list, try retrieving its details using its name (which includes the operation ID):
   ```bash
   gcloud livestream operations describe operations/7f5f76c69780 --location=us-west2 --project=525217445238
   ```

* **Check Logs:** Examine the Google Cloud logs for the Live Stream API in your project. Look for any errors or warnings related to the operation ID or the time when you made the request.

If you've verified the operation ID, timing, project, location, and permissions, and you're still facing issues, providing the complete error message and relevant code snippets would be helpful for further diagnosis. Citations:[] IDEContext:0xc00170ed80}
W0902 12:57:35.893982    9143 document.go:231] Error computing chars added only: getting byte offset for end of change range: invalid column number
Completion Provider - completion # 17 - Typed over previous completion
Completion Provider - completion # 18 - New completion requested from language client at position {"line":42,"character":31}, triggerKind=1
I0902 12:57:35.980128    9143 handler.go:142] cancel was requested for: 247, needs to be canceled: true
Completion Provider - completion # 17 - Typed over previous completion
Completion Provider - completion # 19 - New completion requested from language client at position {"line":42,"character":32}, triggerKind=1
I0902 12:57:36.244423    9143 handler.go:142] cancel was requested for: 248, needs to be canceled: true
Completion Provider - completion # 17 - Typed over previous completion
Completion Provider - completion # 20 - New completion requested from language client at position {"line":42,"character":33}, triggerKind=1
I0902 12:57:36.374440    9143 handler.go:142] cancel was requested for: 251, needs to be canceled: true
Completion Provider - completion # 17 - Typed over previous completion
Completion Provider - completion # 21 - New completion requested from language client at position {"line":42,"character":34}, triggerKind=1
I0902 12:57:36.648228    9143 handler.go:142] cancel was requested for: 253, needs to be canceled: true
Completion Provider - completion # 17 - Typed over previous completion
Completion Provider - completion # 22 - New completion requested from language client at position {"line":42,"character":35}, triggerKind=1
I0902 12:57:36.954372    9143 handler.go:142] cancel was requested for: 256, needs to be canceled: true
Completion Provider - completion # 17 - Typed over previous completion
Completion Provider - completion # 23 - New completion requested from language client at position {"line":42,"character":36}, triggerKind=1
I0902 12:57:37.308237    9143 completion.go:221] Inline suggestion requested (request #259): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:42 Character:36}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:23}
I0902 12:57:37.312256    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-source"},{"isSelected":true},{"content":"\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-source\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-b657d80d-225d-4a86-8f90-921bce51747f"}
I0902 12:57:37.538609    9143 handler.go:142] cancel was requested for: 259, needs to be canceled: true
Completion Provider - completion # 17 - Typed over previous completion
Completion Provider - completion # 24 - New completion requested from language client at position {"line":42,"character":37}, triggerKind=1
I0902 12:57:37.886550    9143 completion.go:221] Inline suggestion requested (request #262): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:42 Character:37}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:24}
I0902 12:57:37.889871    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-source2"},{"isSelected":true},{"content":"\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-source\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-ba50ddb0-f847-4f00-8212-57a2cad41ff4"}
I0902 12:57:38.364070    9143 completion.go:418] Code complete response for request #262 after post-processing: &{Suggestions:[] TraceID:d9e23cff3f62e4a9 ServerContext:febf27497eece1f6 RequestID:cloudcode-648796832-ba50ddb0-f847-4f00-8212-57a2cad41ff4 ServerTiming:gfet4t7; dur=469 NetPlusServerTiming:473.826103ms FromCache:false Typeover:false TriggerMode:0 ProcessingDetails:{RagStatus: AtlasExperience: PromptID:}}
Completion Provider - completion # 24 - Completion result obtained from language client
Completion Provider - completion # 24 - Typed over previous completion
Completion Provider - completion # 25 - New completion requested from language client at position {"line":66,"character":28}, triggerKind=1
I0902 12:57:44.789553    9143 completion.go:221] Inline suggestion requested (request #272): {TextDocumentPositionParams:{TextDocument:{URI:file:///home/reid_butler/python-docs-samples/video/live-stream/create_input.py} Position:{Line:66 Character:28}} TriggerMode:0 IDESessionIndex:20240902_3 CompletionIndex:25}
I0902 12:57:44.792654    9143 client.go:182] CompleteCode request: {"ideContext":{"currentFile":{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_input.py","includedReason":"CURRENTLY_OPEN","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an input endpoint. You send an\n    input video stream to this endpoint.\nExample usage:\n    python create_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_create_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n# ... other imports ...\nfrom google.api_core.operation import Operation\n\n# ... (rest of your code) ...\n\ndef create_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Creates an input.\n    Args:\n        project_id: se-development-9566\n        location: us-west2\n        input_id: fastly-live-source2\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/se-development-9566/locations/us-west2\"\n\n    input = live_stream_v1.types.Input(\n        type_=\"RTMP_PUSH\",\n    )\n    operation = client.create_input(parent=parent, input=input, input_id=input_id)\n    response = operation.result(900)\n    print(f\"Input: {response.name}\")\n    print(f\"Operation ID: {operation}\")  # Correct way to get operation ID\n\n    return response\n\n\n# [END livestream_create_input]\n\nif __name__ == \"__main__\":\n\n    create_input(\n        \"se-development-9566\",\n        \"us-west2\",\n        \"fastly-reid-source2"},{"isSelected":true},{"content":"\"\n    )\n"}]},"otherFiles":[{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an input.\nExample usage:\n    python get_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_get_input]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_input(\n    project_id: str, location: str, input_id: str\n) -\u003e live_stream_v1.types.Input:\n    \"\"\"Gets an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    response = client.get_input(name=name)\n    print(f\"Input: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/start_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for starting a channel.\nExample usage:\n    python start_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_start_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef start_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Starts a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.start_channel(name=name)\n    response = operation.result(900)\n    print(\"Started channel\")\n\n    return response\n\n\n# [END livestream_start_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    start_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_input.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting an input.\nExample usage:\n    python delete_input.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --input_id \u003cinput-id\u003e\n\"\"\"\n\n# [START livestream_delete_input]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_input(project_id: str, location: str, input_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes an input.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the input.\n        input_id: The user-defined input ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\n    operation = client.delete_input(name=name)\n    response = operation.result(600)\n    print(\"Deleted input\")\n\n    return response\n\n\n# [END livestream_delete_input]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the input.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--input_id\",\n        help=\"The user-defined input ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_input(\n        args.project_id,\n        args.location,\n        args.input_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_get_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.Channel:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    response = client.get_channel(name=name)\n    print(f\"Channel: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/stop_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for stopping a channel.\nExample usage:\n    python stop_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_stop_channel]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef stop_channel(\n    project_id: str, location: str, channel_id: str\n) -\u003e live_stream_v1.types.ChannelOperationResponse:\n    \"\"\"Stops a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.stop_channel(name=name)\n    response = operation.result(600)\n    print(\"Stopped channel\")\n\n    return response\n\n\n# [END livestream_stop_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    stop_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting an asset.\nExample usage:\n    python get_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --asset_id \u003casset-id\u003e\n\"\"\"\n\n# [START livestream_get_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_asset(\n    project_id: str, location: str, asset_id: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Gets an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the asset.\n        asset_id: The user-defined asset ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/assets/{asset_id}\"\n    response = client.get_asset(name=name)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the asset.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_pool.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a pool.\nExample usage:\n    python get_pool.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --pool_id \u003cpool-id\u003e\n\"\"\"\n\n# [START livestream_get_pool]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_pool(project_id: str, location: str, pool_id: str) -\u003e live_stream_v1.types.Pool:\n    \"\"\"Gets a pool.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the pool.\n        pool_id: The user-defined pool ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\n    response = client.get_pool(name=name)\n    print(f\"Pool: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_pool]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the pool.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--pool_id\",\n        help=\"The user-defined pool ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_pool(\n        args.project_id,\n        args.location,\n        args.pool_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_inputs.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all inputs in a location.\nExample usage:\n    python list_inputs.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_inputs]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_inputs(project_id: str, location: str) -\u003e pagers.ListInputsPager:\n    \"\"\"Lists all inputs in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the inputs.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_inputs(parent=parent)\n    print(\"Inputs:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_inputs]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the inputs.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_inputs(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channels.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all channels in a location.\nExample usage:\n    python list_channels.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_channels]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channels(project_id: str, location: str) -\u003e pagers.ListChannelsPager:\n    \"\"\"Lists all channels in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channels.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_channels(parent=parent)\n    print(\"Channels:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channels]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channels.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channels(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/get_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for getting a channel event.\nExample usage:\n    python get_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_get_channel_event]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef get_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e live_stream_v1.types.Event:\n    \"\"\"Gets a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.get_event(name=name)\n    print(f\"Channel event: {response.name}\")\n\n    return response\n\n\n# [END livestream_get_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    get_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_assets.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all assets in a location.\nExample usage:\n    python list_assets.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e\n\"\"\"\n\n# [START livestream_list_assets]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_assets(project_id: str, location: str) -\u003e pagers.ListAssetsPager:\n    \"\"\"Lists all assets in a location.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the assets.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n    page_result = client.list_assets(parent=parent)\n    print(\"Assets:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_assets]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the assets.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_assets(\n        args.project_id,\n        args.location,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/create_asset.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2023 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for creating an asset. You use an\n    asset to create a slate.\nExample usage:\n    python create_asset.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --asset_id \u003casset-id\u003e --asset_uri \u003casset-uri\u003e\n\"\"\"\n\n# [START livestream_create_asset]\n\nimport argparse\n\nfrom google.cloud.video import live_stream_v1\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef create_asset(\n    project_id: str, location: str, asset_id: str, asset_uri: str\n) -\u003e live_stream_v1.types.Asset:\n    \"\"\"Creates an asset.\n    Args:\n        project_id: The GCP project ID.\n        location: The location in which to create the asset.\n        asset_id: The user-defined asset ID.\n        asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}\"\n\n    asset = live_stream_v1.types.Asset(\n        video=live_stream_v1.types.Asset.VideoAsset(\n            uri=asset_uri,\n        )\n    )\n    operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\n    response = operation.result(600)\n    print(f\"Asset: {response.name}\")\n\n    return response\n\n\n# [END livestream_create_asset]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location in which to create the asset.\",\n        default=\"us-central1\",\n    )\n    parser.add_argument(\n        \"--asset_id\",\n        help=\"The user-defined asset ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--asset_uri\",\n        help=\"The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\",\n        required=True,\n    )\n    args = parser.parse_args()\n    create_asset(\n        args.project_id,\n        args.location,\n        args.asset_id,\n        args.asset_uri,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/list_channel_events.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for listing all events for a channel.\nExample usage:\n    python list_channel_events.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_list_channel_events]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n    pagers,\n)\n\n\ndef list_channel_events(\n    project_id: str, location: str, channel_id: str\n) -\u003e pagers.ListEventsPager:\n    \"\"\"Lists all events for a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    page_result = client.list_events(parent=parent)\n    print(\"Events:\")\n\n    responses = []\n    for response in page_result:\n        print(response.name)\n        responses.append(response)\n\n    return responses\n\n\n# [END livestream_list_channel_events]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    list_channel_events(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel.\nExample usage:\n    python delete_channel.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e --channel_id \u003cchannel-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\nfrom google.protobuf import empty_pb2 as empty\n\n\ndef delete_channel(project_id: str, location: str, channel_id: str) -\u003e empty.Empty:\n    \"\"\"Deletes a channel.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\n    operation = client.delete_channel(name=name)\n    response = operation.result(600)\n    print(\"Deleted channel\")\n\n    return response\n\n\n# [END livestream_delete_channel]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel(\n        args.project_id,\n        args.location,\n        args.channel_id,\n    )\n"}]},{"codeLanguage":"python","filePath":"/home/reid_butler/python-docs-samples/video/live-stream/delete_channel_event.py","includedReason":"COLOCATED","segments":[{"content":"#!/usr/bin/env python\n\n# Copyright 2022 Google LLC. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Google Cloud Live Stream sample for deleting a channel event.\nExample usage:\n    python delete_channel_event.py --project_id \u003cproject-id\u003e --location \u003clocation\u003e \\\n        --channel_id \u003cchannel-id\u003e --event_id \u003cevent-id\u003e\n\"\"\"\n\n# [START livestream_delete_channel_event]\n\nimport argparse\n\nfrom google.cloud.video.live_stream_v1.services.livestream_service import (\n    LivestreamServiceClient,\n)\n\n\ndef delete_channel_event(\n    project_id: str, location: str, channel_id: str, event_id: str\n) -\u003e None:\n    \"\"\"Deletes a channel event.\n    Args:\n        project_id: The GCP project ID.\n        location: The location of the channel.\n        channel_id: The user-defined channel ID.\n        event_id: The user-defined event ID.\"\"\"\n\n    client = LivestreamServiceClient()\n\n    name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\n    response = client.delete_event(name=name)\n    print(\"Deleted channel event\")\n\n    return response\n\n\n# [END livestream_delete_channel_event]\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--project_id\", help=\"Your Cloud project ID.\", required=True)\n    parser.add_argument(\n        \"--location\",\n        help=\"The location of the channel.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--channel_id\",\n        help=\"The user-defined channel ID.\",\n        required=True,\n    )\n    parser.add_argument(\n        \"--event_id\",\n        help=\"The user-defined event ID.\",\n        required=True,\n    )\n    args = parser.parse_args()\n    delete_channel_event(\n        args.project_id,\n        args.location,\n        args.channel_id,\n        args.event_id,\n    )\n"}]}]},"project":"se-development-9566","requestId":"cloudcode-648796832-880ccc73-9f5e-48f2-ac99-944d1a90ffa4"}
I0902 12:57:45.276392    9143 completion.go:418] Code complete response for request #272 after post-processing: &{Suggestions:[] TraceID:333db91edf3dc808 ServerContext:febf27497eece1f6 RequestID:cloudcode-648796832-880ccc73-9f5e-48f2-ac99-944d1a90ffa4 ServerTiming:gfet4t7; dur=479 NetPlusServerTiming:483.345472ms FromCache:false Typeover:false TriggerMode:0 ProcessingDetails:{RagStatus: AtlasExperience: PromptID:}}
Completion Provider - completion # 25 - Completion result obtained from language client
I0902 12:58:22.093801    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
W0902 12:58:30.495574    9143 document.go:231] Error computing chars added only: getting byte offset for end of change range: invalid column number
I0902 12:59:22.094243    9143 life_cycle.go:262] codeReportEvery: recomputing codereport metric
W0902 12:59:38.775741    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 12:59:48.001435    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 12:59:55.370070    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 13:00:16.022162    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 13:00:22.962579    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 13:00:34.256919    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 13:00:43.596560    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 13:00:44.951295    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
W0902 13:00:46.770347    9143 ide_context.go:40] Failed to fetchOtherDocs: trying to get document with URI uncached
I0902 13:01:22.093322    9143 life_cycle.go:226] codeReportBasicEvery: recomputing codereportbasic metric
W0902 13:26:19.251174    9143 document.go:433] Unable to determine a file extension for the file: %v: %v/home/reid_butler/python-docs-samples/.git/COMMIT_EDITMSGunknown language: git-commit
W0902 13:27:08.823821    9143 server.go:549] unknown method "$/setTrace"
I0902 13:27:09.260537    9143 configuration.go:171] product updateChannel will be used
I0902 13:27:09.260615    9143 configuration.go:568] language thresholds: map[]
I0902 13:27:09.260646    9143 configuration.go:526] dataFileExtensions array: [.csv .tsv .jsonl]
I0902 13:27:09.260678    9143 configuration.go:768] atlas codeCompletion llm options: {MaxTokens:64 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc001304ca9 StopSequences:map[] DataFilePromptLines:0}
I0902 13:27:09.260772    9143 configuration.go:768] atlas codeGeneration llm options: {MaxTokens:512 Temp:0.2 Samples:4 EnablePrompt:<nil> PromptOverride: PostProcess:0xc001304d09 StopSequences:map[*:[[eod] [EOF] [pre] [suf] [mid]]] DataFilePromptLines:5}
I0902 13:27:09.260849    9143 configuration.go:251] Configured settings for atlasOpts: {"Project":"se-development-9566","LogPrompt":true,"UseTypeoverCache":true,"Complete":{"MaxTokens":64,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":null,"DataFilePromptLines":0},"Generate":{"MaxTokens":512,"Temp":0.2,"Samples":4,"EnablePrompt":null,"PromptOverride":"","PostProcess":true,"StopSequences":{"*":["[eod]","[EOF]","[pre]","[suf]","[mid]"]},"DataFilePromptLines":5},"DataFileExtensions":[".csv",".tsv",".jsonl"]}
I0902 13:27:09.260918    9143 configuration.go:259] Configured settings for cloudCodeOpts: {"Project":"se-development-9566","LogPrompt":true,"UseTypeoverCache":true}
I0902 13:27:09.260932    9143 configuration.go:263] Configured settings for opts: &{trace:false atlasAddr:cloudaicompanion.googleapis.com:443 cloudCodeAddr:cloudcode-pa.googleapis.com:443 cloudCodeQuotaProject: autoGen:false invokeGen:true codeCacheMaxEntries:1024 completionOpts:{debounce:50000000 throttle:100000000 minScoreThreshold:-6 languageThresholds:map[] enableThresholds:true commentCompletion:false citationLengthThreshold:-1 enableRecitations:true citationLogFilePath: repeatedStringFilterThreshold:60 deletionCompletion:true otherFilesGenerationLimit:20 otherFilesGenerationSizeLimit:-1 otherFilesCompletionLimit:0} chatOpts:{contextOrdering:fsu maxFileBytes:75000 maxHistoryBytes:500000 escapeContext:false otherFilesLimit:20 otherFilesSizeLimit:-1} useRest:<nil> useCloudCodeAPI:true enableNotebooks:false enableRAGL:false enableRAGLCompletion:false enableRAGLChat:false raglCoLocated:20 raglTotalFiles:250 raglFileLimit:524288}
I0902 13:27:09.261000    9143 configuration.go:265] Configured settings for canCancelRequests: true
I0902 13:27:09.261016    9143 configuration.go:267] Configured settings for contextPromptOpts: &{Endpoint:}
I0902 13:27:09.264390    9143 experiments.go:121] Applied experiment flag "DuetAiCompletion__codeCompletion_triggerForDeletion" to completionOpts.deletionCompletion with value false
I0902 13:27:09.264459    9143 experiments.go:136] Applied experiment flag "DuetAiLocalRag__enable_local_rag_completion" to enableRAGLCompletion with value true
I0902 13:27:09.264478    9143 experiments.go:132] Applied experiment flag "DuetAiLocalRag__enable_local_rag_chat" to enableRAGLChat with value true
I0902 13:27:09.264498    9143 experiments.go:128] Applied experiment flag "DuetAiLocalRag__enable_local_rag" to enableRAGL with value true
I0902 13:27:09.264517    9143 experiments.go:105] Applied experiment flag "DuetAiCloudCodeAPI__enable_cloudcode_api" to useCloudCodeAPI with value true
I0902 13:27:09.264543    9143 experiments.go:101] Applied experiment flag "Chat__chat_context_window_size" to chat.contextWindowSize with value -1
I0902 13:27:09.264561    9143 experiments.go:97] Applied experiment flag "DuetAiGeneration__codeGeneration_context_window_size" to otherFilesGenerationSizeLimit with value 64000
I0902 13:27:09.264584    9143 experiments.go:160] Applied experiment flag "DuetAiLocalRag__otherfiles_chat_limit" to otherFilesChatLimit with value 20
I0902 13:27:09.264606    9143 experiments.go:156] Applied experiment flag "DuetAiLocalRag__otherfiles_completion_limit" to otherFilesCompletionLimit with value 15
I0902 13:27:09.264624    9143 experiments.go:140] Applied experiment flag "DuetAiLocalRag__otherfiles_generation_limit" to otherFilesGenerationLimit with value 40
I0902 13:27:09.264639    9143 experiments.go:113] Applied experiment flag "DuetAiMendelOverrides__inlineSuggestions_debounceMs" to completionOpts.debounce with value 300
I0902 13:27:09.264659    9143 experiments.go:144] Applied experiment flag "DuetAiLocalRag__cache_co_located" to coLocated with value 20
I0902 13:27:09.264681    9143 experiments.go:148] Applied experiment flag "DuetAiLocalRag__cache_file_limit" to fileLimit with value 524288
I0902 13:27:09.264697    9143 experiments.go:152] Applied experiment flag "DuetAiLocalRag__cache_total_files" to totalFiles with value 250
I0902 13:27:09.264710    9143 experiments.go:109] Applied experiment flag "DuetAiMendelOverrides__codeCompletion_defaultThreshold" to completionOpts.minScoreTheshold with value -4.1
I0902 13:27:09.264772    9143 configuration.go:394] Repopulating context cache from document cache
